/* The following code was generated by JFlex 1.4.3 on 23.08.13 13:57 */

package com.antonzherdev.objd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.antonzherdev.objd.psi.ObjDTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.08.13 13:57 from the specification file
 * <tt>/Users/antonzherdev/dev/objd-idea-plugin/src/com/antonzherdev/objd/ObjD.flex</tt>
 */
class ObjDLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMENT_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\1\1\6\1\0\1\1\1\3\22\0\1\1\1\63"+
    "\1\5\3\0\1\60\1\0\1\51\1\52\1\4\1\61\1\53\1\10"+
    "\1\12\1\2\4\11\1\42\3\11\1\43\1\11\1\54\1\0\1\55"+
    "\1\56\1\44\1\62\1\0\32\7\1\47\1\0\1\50\1\0\1\7"+
    "\1\0\1\14\1\36\1\15\1\31\1\20\1\32\1\17\1\40\1\23"+
    "\1\7\1\16\1\21\1\24\1\34\1\25\1\13\1\7\1\26\1\22"+
    "\1\27\1\35\1\30\1\37\1\33\1\41\1\7\1\45\1\57\1\46"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\16\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\1\1\24"+
    "\1\25\1\26\4\27\1\30\1\31\1\32\1\0\1\33"+
    "\1\34\1\7\1\35\1\36\1\0\11\5\1\37\10\5"+
    "\1\40\13\5\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\13\5\1\53\5\5\1\54"+
    "\1\55\1\5\1\56\2\5\1\57\13\5\1\60\1\5"+
    "\1\61\1\62\3\5\1\63\1\5\1\64\1\65\2\5"+
    "\1\66\1\5\1\67\1\70\2\5\1\71\1\5\1\72"+
    "\1\5\1\73\1\74\1\75\3\5\1\76\6\5\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\3\5\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\150\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\150"+
    "\0\u0618\0\150\0\234\0\u064c\0\u0680\0\150\0\150\0\150"+
    "\0\u0138\0\u0138\0\150\0\u06b4\0\150\0\150\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u016c\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u016c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\u06e8\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u016c\0\u016c\0\u1040\0\u016c\0\u1074\0\u10a8\0\u016c\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u016c\0\u1318\0\u016c\0\u016c\0\u134c\0\u1380"+
    "\0\u13b4\0\u016c\0\u13e8\0\u016c\0\u016c\0\u141c\0\u1450\0\u016c"+
    "\0\u1484\0\u016c\0\u016c\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u016c"+
    "\0\u1588\0\u016c\0\u016c\0\u016c\0\u15bc\0\u15f0\0\u1624\0\u016c"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u016c\0\u016c"+
    "\0\u016c\0\u1790\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u17c4"+
    "\0\u17f8\0\u182c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u016c\0\u016c\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\10\1\15\2\10\1\16"+
    "\1\10\1\17\1\20\2\10\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\1\30\1\31\2\10\2\12"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\52\1\53\1\54\1\52\1\4\55\52"+
    "\65\0\1\4\1\0\1\4\2\0\1\4\57\0\1\55"+
    "\1\0\1\56\51\0\1\57\63\0\1\60\5\0\5\61"+
    "\1\62\1\0\55\61\7\0\1\10\1\0\1\10\1\0"+
    "\31\10\30\0\1\63\1\64\30\0\2\64\1\65\11\0"+
    "\1\66\14\0\1\10\1\0\1\12\1\67\27\10\2\12"+
    "\27\0\1\10\1\0\1\10\1\0\1\10\1\70\11\10"+
    "\1\71\15\10\27\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\72\22\10\27\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\73\11\10\1\74\1\75\7\10\27\0\1\10\1\0"+
    "\1\10\1\0\5\10\1\76\6\10\1\77\14\10\27\0"+
    "\1\10\1\0\1\10\1\0\11\10\1\100\5\10\1\101"+
    "\1\10\1\102\7\10\27\0\1\10\1\0\1\10\1\0"+
    "\5\10\1\103\23\10\27\0\1\10\1\0\1\10\1\0"+
    "\13\10\1\104\11\10\1\105\1\106\2\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\107\10\10\1\110\16\10"+
    "\27\0\1\10\1\0\1\10\1\0\5\10\1\111\4\10"+
    "\1\112\16\10\27\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\113\4\10\1\114\22\10\27\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\115\20\10\27\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\116\12\10\1\117\5\10\27\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\120\1\121\12\10\1\122"+
    "\2\10\27\0\1\10\1\0\1\10\1\0\5\10\1\123"+
    "\2\10\1\124\14\10\1\125\3\10\76\0\1\126\63\0"+
    "\1\127\63\0\1\130\64\0\1\131\64\0\1\132\61\0"+
    "\1\133\2\0\1\134\60\0\1\135\7\0\1\136\61\0"+
    "\3\55\1\0\2\55\1\0\55\55\11\0\1\64\1\67"+
    "\27\0\2\64\31\0\1\137\30\0\2\137\27\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\140\26\10\27\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\141\20\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\142\27\10\27\0\1\10"+
    "\1\0\1\10\1\0\7\10\1\143\21\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\144\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\22\10\1\145\6\10\27\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\146\22\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\147\11\10\1\150\6\10"+
    "\1\151\6\10\27\0\1\10\1\0\1\10\1\0\1\152"+
    "\30\10\27\0\1\10\1\0\1\10\1\0\14\10\1\153"+
    "\14\10\27\0\1\10\1\0\1\10\1\0\14\10\1\154"+
    "\14\10\27\0\1\10\1\0\1\10\1\0\1\10\1\155"+
    "\20\10\1\156\6\10\27\0\1\10\1\0\1\10\1\0"+
    "\13\10\1\157\15\10\27\0\1\10\1\0\1\10\1\0"+
    "\1\160\30\10\27\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\161\4\10\1\162\15\10\27\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\163\20\10\27\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\164\11\10\27\0\1\10\1\0\1\10"+
    "\1\0\6\10\1\165\22\10\27\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\166\16\10\27\0\1\10\1\0\1\10"+
    "\1\0\6\10\1\167\22\10\27\0\1\10\1\0\1\10"+
    "\1\0\21\10\1\170\7\10\27\0\1\10\1\0\1\10"+
    "\1\0\26\10\1\171\2\10\27\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\172\16\10\27\0\1\10\1\0\1\10"+
    "\1\0\5\10\1\173\23\10\27\0\1\10\1\0\1\10"+
    "\1\0\14\10\1\174\14\10\27\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\175\27\10\27\0\1\10\1\0\1\10"+
    "\1\0\14\10\1\176\14\10\27\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\177\20\10\27\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\200\25\10\27\0\1\10\1\0\1\10"+
    "\1\0\15\10\1\201\13\10\27\0\1\10\1\0\1\10"+
    "\1\0\7\10\1\202\21\10\27\0\1\10\1\0\1\10"+
    "\1\0\5\10\1\203\23\10\27\0\1\10\1\0\1\10"+
    "\1\0\5\10\1\204\23\10\27\0\1\10\1\0\1\10"+
    "\1\0\11\10\1\205\17\10\27\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\206\11\10\27\0\1\10\1\0\1\10"+
    "\1\0\14\10\1\207\14\10\27\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\210\11\10\1\211\6\10\27\0\1\10"+
    "\1\0\1\10\1\0\23\10\1\212\5\10\27\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\213\16\10\27\0\1\10"+
    "\1\0\1\10\1\0\27\10\1\214\1\215\27\0\1\10"+
    "\1\0\1\10\1\0\22\10\1\216\6\10\27\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\217\20\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\220\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\221\16\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\222\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\223\12\10\27\0\1\10"+
    "\1\0\1\10\1\0\7\10\1\224\21\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\225\27\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\226\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\227\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\230\22\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\231\27\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\232\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\233\25\10\27\0\1\10"+
    "\1\0\1\10\1\0\25\10\1\234\3\10\27\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\235\22\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\236\27\10\27\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\237\27\10\27\0\1\10"+
    "\1\0\1\10\1\0\7\10\1\240\21\10\27\0\1\10"+
    "\1\0\1\10\1\0\21\10\1\241\7\10\27\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\242\20\10\27\0\1\10"+
    "\1\0\1\10\1\0\21\10\1\243\7\10\27\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\244\26\10\27\0\1\10"+
    "\1\0\1\10\1\0\13\10\1\245\15\10\27\0\1\10"+
    "\1\0\1\10\1\0\13\10\1\246\15\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\247\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\24\10\1\250\4\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\251\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\252\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\27\10\1\253\1\254\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\255\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\256\25\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\257\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\260\24\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\261\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\262\12\10\27\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\263\26\10\27\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\264\24\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\265\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\266\14\10\27\0\1\10"+
    "\1\0\1\10\1\0\21\10\1\267\7\10\27\0\1\10"+
    "\1\0\1\10\1\0\27\10\1\270\1\271\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\272\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\5\10\1\273\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\7\10\1\274\21\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\1\11\17\1\10\11\5\1\1\11"+
    "\1\1\1\11\3\1\3\11\1\0\1\1\1\11\1\1"+
    "\2\11\1\0\36\1\11\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ObjDLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ObjDLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return ObjDTypes.PLUS_SET;
          }
        case 82: break;
        case 67: 
          { return ObjDTypes.TP_UINT4;
          }
        case 83: break;
        case 52: 
          { return ObjDTypes.TP_INT4;
          }
        case 84: break;
        case 72: 
          { return ObjDTypes.W_STATIC;
          }
        case 85: break;
        case 47: 
          { return ObjDTypes.W_NIL;
          }
        case 86: break;
        case 80: 
          { return ObjDTypes.W_PRIVATE;
          }
        case 87: break;
        case 19: 
          { return ObjDTypes.SET;
          }
        case 88: break;
        case 39: 
          { return ObjDTypes.PLUS_PLUS;
          }
        case 89: break;
        case 22: 
          { return ObjDTypes.EXCLAMATION;
          }
        case 90: break;
        case 32: 
          { return ObjDTypes.W_DO;
          }
        case 91: break;
        case 6: 
          { return ObjDTypes.MINUS;
          }
        case 92: break;
        case 71: 
          { return ObjDTypes.W_WHILE;
          }
        case 93: break;
        case 77: 
          { return ObjDTypes.TP_FLOAT4;
          }
        case 94: break;
        case 33: 
          { return ObjDTypes.MOREEQ;
          }
        case 95: break;
        case 10: 
          { return ObjDTypes.OPEN_BRACE;
          }
        case 96: break;
        case 13: 
          { return ObjDTypes.CLOSE_SQUARE_BRACKET;
          }
        case 97: break;
        case 50: 
          { return ObjDTypes.W_SELF;
          }
        case 98: break;
        case 29: 
          { return ObjDTypes.ARROW;
          }
        case 99: break;
        case 26: 
          { return ObjDTypes.MUL_SET;
          }
        case 100: break;
        case 54: 
          { return ObjDTypes.W_TRUE;
          }
        case 101: break;
        case 76: 
          { return ObjDTypes.W_RETURN;
          }
        case 102: break;
        case 70: 
          { return ObjDTypes.W_BREAK;
          }
        case 103: break;
        case 35: 
          { return ObjDTypes.EQ;
          }
        case 104: break;
        case 3: 
          { return ObjDTypes.DIV;
          }
        case 105: break;
        case 63: 
          { return ObjDTypes.W_TRAIT;
          }
        case 106: break;
        case 40: 
          { return ObjDTypes.NOT_EQ;
          }
        case 107: break;
        case 15: 
          { return ObjDTypes.CLOSE_BRACKET;
          }
        case 108: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 109: break;
        case 5: 
          { return ObjDTypes.IDENT;
          }
        case 110: break;
        case 27: 
          { return ObjDTypes.STRING;
          }
        case 111: break;
        case 81: 
          { return ObjDTypes.W_EXTENDS;
          }
        case 112: break;
        case 74: 
          { return ObjDTypes.W_STRUCT;
          }
        case 113: break;
        case 8: 
          { return ObjDTypes.DOT;
          }
        case 114: break;
        case 18: 
          { return ObjDTypes.LESS;
          }
        case 115: break;
        case 68: 
          { return ObjDTypes.TP_UINT8;
          }
        case 116: break;
        case 17: 
          { return ObjDTypes.COLON;
          }
        case 117: break;
        case 56: 
          { return ObjDTypes.TP_VOID;
          }
        case 118: break;
        case 30: 
          { return ObjDTypes.MINUS_SET;
          }
        case 119: break;
        case 11: 
          { return ObjDTypes.CLOSE_BRACE;
          }
        case 120: break;
        case 53: 
          { return ObjDTypes.TP_INT8;
          }
        case 121: break;
        case 31: 
          { return ObjDTypes.W_IF;
          }
        case 122: break;
        case 28: 
          { return ObjDTypes.MINUS_MINUS;
          }
        case 123: break;
        case 41: 
          { yybegin(YYINITIAL); return ObjDTypes.COMMENT;
          }
        case 124: break;
        case 78: 
          { return ObjDTypes.TP_FLOAT8;
          }
        case 125: break;
        case 66: 
          { return ObjDTypes.TP_FLOAT;
          }
        case 126: break;
        case 44: 
          { return ObjDTypes.W_VAL;
          }
        case 127: break;
        case 7: 
          { return ObjDTypes.INT;
          }
        case 128: break;
        case 62: 
          { return ObjDTypes.W_CLASS;
          }
        case 129: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 130: break;
        case 12: 
          { return ObjDTypes.OPEN_SQUARE_BRACKET;
          }
        case 131: break;
        case 55: 
          { return ObjDTypes.W_TYPE;
          }
        case 132: break;
        case 45: 
          { return ObjDTypes.W_VAR;
          }
        case 133: break;
        case 23: 
          { return ObjDTypes.COMMENT;
          }
        case 134: break;
        case 16: 
          { return ObjDTypes.COMMA;
          }
        case 135: break;
        case 24: 
          { yybegin(COMMENT_STATE); return ObjDTypes.COMMENT;
          }
        case 136: break;
        case 14: 
          { return ObjDTypes.OPEN_BRACKET;
          }
        case 137: break;
        case 49: 
          { return ObjDTypes.W_ENUM;
          }
        case 138: break;
        case 79: 
          { return ObjDTypes.W_PACKAGE;
          }
        case 139: break;
        case 65: 
          { return ObjDTypes.W_FALSE;
          }
        case 140: break;
        case 57: 
          { return ObjDTypes.TP_UINT;
          }
        case 141: break;
        case 58: 
          { return ObjDTypes.TP_BOOL;
          }
        case 142: break;
        case 25: 
          { return ObjDTypes.DIV_SET;
          }
        case 143: break;
        case 4: 
          { return ObjDTypes.MUL;
          }
        case 144: break;
        case 75: 
          { return ObjDTypes.W_IMPORT;
          }
        case 145: break;
        case 20: 
          { return ObjDTypes.PLUS;
          }
        case 146: break;
        case 9: 
          { return ObjDTypes.MORE;
          }
        case 147: break;
        case 36: 
          { return ObjDTypes.OR;
          }
        case 148: break;
        case 73: 
          { return ObjDTypes.TP_STRING;
          }
        case 149: break;
        case 21: 
          { return ObjDTypes.WHAT;
          }
        case 150: break;
        case 69: 
          { return ObjDTypes.TP_UBYTE;
          }
        case 151: break;
        case 64: 
          { return ObjDTypes.W_THROW;
          }
        case 152: break;
        case 59: 
          { return ObjDTypes.TP_BYTE;
          }
        case 153: break;
        case 46: 
          { return ObjDTypes.W_DEF;
          }
        case 154: break;
        case 34: 
          { return ObjDTypes.LESSEQ;
          }
        case 155: break;
        case 37: 
          { return ObjDTypes.AND;
          }
        case 156: break;
        case 51: 
          { return ObjDTypes.W_STUB;
          }
        case 157: break;
        case 48: 
          { return ObjDTypes.W_ELSE;
          }
        case 158: break;
        case 61: 
          { return ObjDTypes.W_WITH;
          }
        case 159: break;
        case 42: 
          { return ObjDTypes.FLOAT;
          }
        case 160: break;
        case 43: 
          { return ObjDTypes.TP_INT;
          }
        case 161: break;
        case 60: 
          { return ObjDTypes.W_WEAK;
          }
        case 162: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
