/* The following code was generated by JFlex 1.4.3 on 02.07.13 16:35 */

package com.antonzherdev.objd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.antonzherdev.objd.psi.ObjDTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.07.13 16:35 from the specification file
 * <tt>/Users/antonzherdev/dev/ObjDPlugin/src/com/antonzherdev/objd/ObjD.flex</tt>
 */
class ObjDLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\5\10\0\1\1\1\7\1\0\1\1\1\3\22\0\1\1\1\0"+
    "\1\6\3\0\1\51\1\0\1\42\1\43\1\4\1\53\1\44\1\34"+
    "\1\52\1\2\12\10\1\45\1\0\1\46\1\47\1\35\1\54\1\0"+
    "\32\10\1\40\1\0\1\41\1\0\1\10\1\0\1\13\1\33\1\11"+
    "\1\24\1\25\1\26\1\31\1\10\1\15\2\10\1\12\1\16\1\30"+
    "\1\20\1\17\1\10\1\21\1\14\1\22\1\32\1\23\1\10\1\27"+
    "\2\10\1\36\1\50\1\37\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\16\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\23\1\24\1\25"+
    "\1\26\2\0\1\27\4\5\1\30\17\5\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\4\5"+
    "\1\41\1\5\1\42\3\5\1\43\1\44\1\5\1\45"+
    "\5\5\1\46\1\47\2\5\1\26\4\5\1\50\3\5"+
    "\1\51\1\52\1\53\1\5\1\54\2\5\1\55\1\56"+
    "\1\57\5\5\1\60\1\5\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\2\5\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\132\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\132"+
    "\0\132\0\132\0\132\0\132\0\132\0\132\0\132\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\132\0\u0492\0\132\0\u04bf\0\u04ec"+
    "\0\341\0\341\0\u0519\0\u0546\0\u0573\0\u05a0\0\u010e\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\132\0\132"+
    "\0\132\0\132\0\132\0\132\0\132\0\132\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u010e\0\u0951\0\u010e\0\u097e\0\u09ab"+
    "\0\u09d8\0\u010e\0\u010e\0\u0a05\0\u010e\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u010e\0\u010e\0\u0b13\0\u0b40\0\u04ec\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u010e\0\u0c21\0\u0c4e\0\u0c7b\0\u010e"+
    "\0\u010e\0\u010e\0\u0ca8\0\u010e\0\u0cd5\0\u0d02\0\u010e\0\u010e"+
    "\0\u010e\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u010e\0\u0e10"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0e3d\0\u0e6a"+
    "\0\u010e\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\3\1\7\1\4"+
    "\1\10\1\11\2\10\1\12\1\13\1\10\1\14\2\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\10\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\3\1\4\1\3\1\4\3\3"+
    "\1\4\45\3\56\0\1\4\1\0\1\4\3\0\1\4"+
    "\47\0\1\47\1\0\1\50\50\0\6\51\1\52\1\0"+
    "\45\51\10\0\24\10\31\0\2\10\1\53\21\10\31\0"+
    "\12\10\1\54\2\10\1\55\6\10\31\0\6\10\1\56"+
    "\7\10\1\57\1\10\1\60\3\10\31\0\11\10\1\61"+
    "\12\10\31\0\11\10\1\62\12\10\31\0\3\10\1\63"+
    "\4\10\1\64\13\10\31\0\15\10\1\65\6\10\31\0"+
    "\2\10\1\66\14\10\1\67\1\70\3\10\31\0\2\10"+
    "\1\71\1\72\20\10\31\0\5\10\1\73\16\10\31\0"+
    "\15\10\1\74\6\10\31\0\5\10\1\75\16\10\31\0"+
    "\10\10\1\76\13\10\55\0\1\77\1\100\66\0\1\101"+
    "\54\0\1\102\54\0\1\103\55\0\1\104\55\0\1\105"+
    "\56\0\1\106\1\0\3\47\1\0\3\47\1\0\45\47"+
    "\4\50\1\107\1\0\47\50\10\0\3\10\1\110\20\10"+
    "\31\0\3\10\1\111\5\10\1\112\10\10\1\113\1\10"+
    "\31\0\12\10\1\114\11\10\31\0\7\10\1\115\14\10"+
    "\31\0\12\10\1\116\11\10\31\0\5\10\1\117\16\10"+
    "\31\0\3\10\1\120\16\10\1\121\1\10\31\0\2\10"+
    "\1\122\6\10\1\123\12\10\31\0\5\10\1\124\16\10"+
    "\31\0\16\10\1\125\5\10\31\0\4\10\1\126\17\10"+
    "\31\0\12\10\1\127\11\10\31\0\22\10\1\130\1\10"+
    "\31\0\10\10\1\131\13\10\31\0\2\10\1\132\21\10"+
    "\31\0\2\10\1\133\21\10\31\0\12\10\1\134\11\10"+
    "\31\0\20\10\1\135\3\10\31\0\10\10\1\136\13\10"+
    "\21\0\2\50\1\137\1\50\1\107\1\0\47\50\10\0"+
    "\4\10\1\140\17\10\31\0\12\10\1\141\11\10\31\0"+
    "\5\10\1\142\14\10\1\143\1\10\31\0\23\10\1\144"+
    "\31\0\10\10\1\145\13\10\31\0\13\10\1\146\10\10"+
    "\31\0\5\10\1\147\16\10\31\0\15\10\1\150\6\10"+
    "\31\0\14\10\1\151\7\10\31\0\15\10\1\152\6\10"+
    "\31\0\15\10\1\153\6\10\31\0\6\10\1\154\15\10"+
    "\31\0\3\10\1\155\20\10\31\0\4\10\1\156\17\10"+
    "\31\0\12\10\1\157\11\10\31\0\2\10\1\160\21\10"+
    "\31\0\4\10\1\161\17\10\31\0\5\10\1\162\16\10"+
    "\31\0\20\10\1\163\3\10\31\0\1\10\1\164\22\10"+
    "\31\0\11\10\1\165\12\10\31\0\3\10\1\166\20\10"+
    "\31\0\12\10\1\167\11\10\31\0\20\10\1\170\3\10"+
    "\31\0\12\10\1\171\11\10\31\0\15\10\1\172\6\10"+
    "\31\0\1\10\1\173\22\10\31\0\21\10\1\174\2\10"+
    "\31\0\12\10\1\175\11\10\31\0\12\10\1\176\11\10"+
    "\31\0\12\10\1\177\11\10\31\0\14\10\1\200\7\10"+
    "\31\0\15\10\1\201\6\10\31\0\4\10\1\202\17\10"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\21\1\10\11\4\1\1\11"+
    "\1\1\1\11\1\1\2\0\25\1\10\11\1\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  ObjDLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ObjDLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return ObjDTypes.OPEN_BRACE;
          }
        case 57: break;
        case 54: 
          { return ObjDTypes.W_IMPORT;
          }
        case 58: break;
        case 6: 
          { return ObjDTypes.MINUS;
          }
        case 59: break;
        case 35: 
          { return ObjDTypes.W_VAL;
          }
        case 60: break;
        case 50: 
          { return ObjDTypes.W_FALSE;
          }
        case 61: break;
        case 36: 
          { return ObjDTypes.W_VAR;
          }
        case 62: break;
        case 4: 
          { return ObjDTypes.MUL;
          }
        case 63: break;
        case 49: 
          { return ObjDTypes.TP_FLOAT;
          }
        case 64: break;
        case 5: 
          { return ObjDTypes.IDENT;
          }
        case 65: break;
        case 37: 
          { return ObjDTypes.W_DEF;
          }
        case 66: break;
        case 32: 
          { return ObjDTypes.PLUS_PLUS;
          }
        case 67: break;
        case 18: 
          { return ObjDTypes.LINE;
          }
        case 68: break;
        case 27: 
          { return ObjDTypes.MOREEQ;
          }
        case 69: break;
        case 44: 
          { return ObjDTypes.W_ENUM;
          }
        case 70: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 71: break;
        case 43: 
          { return ObjDTypes.W_ELSE;
          }
        case 72: break;
        case 13: 
          { return ObjDTypes.CLOSE_BRACKET;
          }
        case 73: break;
        case 53: 
          { return ObjDTypes.W_STRUCT;
          }
        case 74: break;
        case 10: 
          { return ObjDTypes.OPEN_SQUARE_BRACKET;
          }
        case 75: break;
        case 12: 
          { return ObjDTypes.OPEN_BRACKET;
          }
        case 76: break;
        case 21: 
          { return ObjDTypes.WHAT;
          }
        case 77: break;
        case 16: 
          { return ObjDTypes.LESS;
          }
        case 78: break;
        case 41: 
          { return ObjDTypes.W_TRUE;
          }
        case 79: break;
        case 48: 
          { return ObjDTypes.W_TRAIT;
          }
        case 80: break;
        case 51: 
          { return ObjDTypes.W_STATIC;
          }
        case 81: break;
        case 26: 
          { return ObjDTypes.ARROW;
          }
        case 82: break;
        case 29: 
          { return ObjDTypes.EQ;
          }
        case 83: break;
        case 47: 
          { return ObjDTypes.W_CLASS;
          }
        case 84: break;
        case 24: 
          { return ObjDTypes.W_IF;
          }
        case 85: break;
        case 40: 
          { return ObjDTypes.W_STUB;
          }
        case 86: break;
        case 55: 
          { return ObjDTypes.W_PRIVATE;
          }
        case 87: break;
        case 19: 
          { return ObjDTypes.DOT;
          }
        case 88: break;
        case 3: 
          { return ObjDTypes.DIV;
          }
        case 89: break;
        case 25: 
          { return ObjDTypes.MINUS_MINUS;
          }
        case 90: break;
        case 28: 
          { return ObjDTypes.LESSEQ;
          }
        case 91: break;
        case 56: 
          { return ObjDTypes.W_EXTENDS;
          }
        case 92: break;
        case 31: 
          { return ObjDTypes.AND;
          }
        case 93: break;
        case 22: 
          { return ObjDTypes.COMMENT;
          }
        case 94: break;
        case 11: 
          { return ObjDTypes.CLOSE_SQUARE_BRACKET;
          }
        case 95: break;
        case 14: 
          { return ObjDTypes.COMMA;
          }
        case 96: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 97: break;
        case 42: 
          { return ObjDTypes.TP_VOID;
          }
        case 98: break;
        case 45: 
          { return ObjDTypes.TP_UINT;
          }
        case 99: break;
        case 23: 
          { return ObjDTypes.STRING;
          }
        case 100: break;
        case 15: 
          { return ObjDTypes.COLON;
          }
        case 101: break;
        case 52: 
          { return ObjDTypes.TP_STRING;
          }
        case 102: break;
        case 33: 
          { return ObjDTypes.W_SET;
          }
        case 103: break;
        case 17: 
          { return ObjDTypes.SET;
          }
        case 104: break;
        case 39: 
          { return ObjDTypes.W_GET;
          }
        case 105: break;
        case 34: 
          { return ObjDTypes.TP_INT;
          }
        case 106: break;
        case 38: 
          { return ObjDTypes.W_NIL;
          }
        case 107: break;
        case 46: 
          { return ObjDTypes.TP_BOOL;
          }
        case 108: break;
        case 7: 
          { return ObjDTypes.MORE;
          }
        case 109: break;
        case 9: 
          { return ObjDTypes.CLOSE_BRACE;
          }
        case 110: break;
        case 20: 
          { return ObjDTypes.PLUS;
          }
        case 111: break;
        case 30: 
          { return ObjDTypes.OR;
          }
        case 112: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
