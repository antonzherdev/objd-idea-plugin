/* The following code was generated by JFlex 1.4.3 on 3/18/14 7:31 PM */

package com.antonzherdev.objd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.antonzherdev.objd.psi.ObjDTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/18/14 7:31 PM from the specification file
 * <tt>/Users/antonzherdev/dev/objd-idea-plugin/src/com/antonzherdev/objd/ObjD.flex</tt>
 */
class ObjDLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_EXPR_BRACKET_WAIT_STATE = 8;
  public static final int COMMENT_STATE = 2;
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 4;
  public static final int STRING_EXPR_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\1\1\11\1\0\1\1\1\3\22\0\1\1\1\67"+
    "\1\13\1\0\1\14\1\0\1\64\1\0\1\15\1\27\1\4\1\65"+
    "\1\60\1\6\1\10\1\2\4\7\1\50\3\7\1\51\1\7\1\61"+
    "\1\0\1\62\1\63\1\53\1\66\1\0\32\5\1\56\1\12\1\57"+
    "\1\0\1\5\1\0\1\31\1\44\1\32\1\24\1\20\1\17\1\34"+
    "\1\26\1\16\1\47\1\33\1\21\1\35\1\23\1\36\1\30\1\5"+
    "\1\37\1\22\1\40\1\43\1\41\1\25\1\42\1\45\1\46\1\54"+
    "\1\52\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\10\5\1\13\11\5\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\1\1\25\1\26\1\27\3\30\3\31\1\32\1\33"+
    "\3\32\1\34\1\32\1\34\1\35\1\36\1\37\3\34"+
    "\7\32\1\3\1\40\1\41\1\30\1\42\1\43\1\44"+
    "\1\0\1\45\1\46\1\7\1\47\1\50\1\0\1\51"+
    "\17\5\1\52\27\5\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\31\1\51\3\34\1\64"+
    "\1\65\1\66\16\5\1\67\1\70\7\5\1\71\12\5"+
    "\1\72\1\73\6\5\1\74\1\75\3\34\1\76\1\77"+
    "\4\5\1\100\1\101\1\5\1\102\1\103\3\5\1\104"+
    "\2\5\1\105\1\106\4\5\1\107\2\5\1\110\1\111"+
    "\4\5\1\112\1\5\1\113\1\114\1\5\1\115\1\5"+
    "\1\116\1\117\1\34\1\120\1\5\1\121\1\122\1\123"+
    "\4\5\1\124\1\5\1\125\4\5\1\126\2\5\1\127"+
    "\1\130\1\5\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\1\5\1\141\1\142\1\143\5\5\1\144"+
    "\1\145\1\5\1\146\1\5\1\147\1\150\2\5\1\151"+
    "\2\5\1\152\1\5\1\153\2\5\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u0118\0\u0118\0\u0118\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0118"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u06c8\0\u0700\0\u0738\0\u0770\0\u0118\0\u07a8\0\u0118"+
    "\0\u0150\0\u07e0\0\u0818\0\u0150\0\u0850\0\u0118\0\u0118\0\u0150"+
    "\0\u0888\0\u01c0\0\u08c0\0\u0230\0\u08f8\0\u0118\0\u0118\0\u0118"+
    "\0\u0930\0\u0968\0\u09a0\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u0888\0\u0118\0\u0118\0\u09d8\0\u0118\0\u0118"+
    "\0\u0118\0\u0a10\0\u0118\0\u0118\0\u0a48\0\u0118\0\u0118\0\u0a80"+
    "\0\u01f8\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u01f8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u0118\0\u0118\0\u0118\0\u1308\0\u0118\0\u0118\0\u0118\0\u1340"+
    "\0\u0118\0\u0118\0\u08c0\0\u1378\0\u13b0\0\u13e8\0\u0118\0\u0a80"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u01f8"+
    "\0\u01f8\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u01f8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u01f8\0\u01f8\0\u1b20\0\u1b58\0\u1b90"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u0118\0\u0118\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u01f8\0\u01f8\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u01f8\0\u01f8"+
    "\0\u1df8\0\u01f8\0\u01f8\0\u1e30\0\u1e68\0\u1ea0\0\u01f8\0\u1ed8"+
    "\0\u1f10\0\u01f8\0\u01f8\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u01f8"+
    "\0\u2028\0\u2060\0\u01f8\0\u01f8\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u01f8\0\u2178\0\u01f8\0\u21b0\0\u21e8\0\u01f8\0\u2220\0\u01f8"+
    "\0\u08c0\0\u2258\0\u08c0\0\u2290\0\u01f8\0\u22c8\0\u01f8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u01f8\0\u23e0\0\u01f8\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u01f8\0\u24f8\0\u2530\0\u01f8\0\u01f8\0\u2568"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u08c0\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u25a0\0\u01f8\0\u01f8\0\u01f8\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u26b8\0\u01f8\0\u01f8\0\u26f0\0\u01f8\0\u2728\0\u01f8\0\u01f8"+
    "\0\u2760\0\u2798\0\u01f8\0\u27d0\0\u2808\0\u01f8\0\u2840\0\u01f8"+
    "\0\u2878\0\u28b0\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\7\1\6\1\16\1\6\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\12\1\30"+
    "\1\31\1\32\1\33\3\12\1\34\1\35\1\36\1\37"+
    "\1\12\1\40\1\41\3\12\2\14\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\60\1\61\1\62"+
    "\4\60\1\7\56\60\1\63\1\64\1\63\1\64\5\63"+
    "\1\7\1\65\1\66\1\67\53\63\1\66\1\70\1\71"+
    "\1\70\1\72\1\73\1\74\1\75\1\66\1\7\1\66"+
    "\1\76\1\77\1\100\1\101\1\73\1\102\4\73\1\103"+
    "\1\73\1\66\20\73\2\75\1\104\1\105\6\66\1\106"+
    "\1\107\1\110\1\111\1\66\1\112\1\6\1\7\1\113"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\7\1\6"+
    "\1\16\1\6\1\114\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\12\1\115\1\31\1\32\1\33"+
    "\3\12\1\34\1\35\1\36\1\37\1\12\1\40\1\41"+
    "\3\12\2\14\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\71\0\1\7\1\0\1\7\5\0\1\7\60\0\1\116"+
    "\1\0\1\117\56\0\1\120\10\0\1\121\45\0\1\122"+
    "\10\0\1\123\11\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\22\12\24\0\1\124\1\125\40\0\2\125\1\0"+
    "\1\126\7\0\1\127\11\0\1\12\1\0\1\14\1\130"+
    "\5\0\11\12\1\0\20\12\2\14\23\0\1\12\1\0"+
    "\1\12\6\0\1\12\1\131\3\12\1\132\3\12\1\0"+
    "\5\12\1\133\14\12\23\0\1\12\1\0\1\12\6\0"+
    "\1\134\2\12\1\135\5\12\1\0\1\12\1\136\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\3\12\1\137\1\12"+
    "\1\140\3\12\1\0\12\12\1\141\7\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\142\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\2\12\1\143\6\12"+
    "\1\0\10\12\1\144\2\12\1\145\1\12\1\146\4\12"+
    "\23\0\1\12\1\0\1\12\6\0\1\147\10\12\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\2\12\1\150"+
    "\6\12\1\0\6\12\1\151\13\12\23\0\1\12\1\0"+
    "\1\12\6\0\1\152\1\12\1\153\5\12\1\154\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\155\5\12\1\156\3\12\1\157\6\12\23\0"+
    "\1\12\1\0\1\12\6\0\5\12\1\160\3\12\1\0"+
    "\14\12\1\161\5\12\23\0\1\12\1\0\1\12\6\0"+
    "\3\12\1\162\4\12\1\163\1\0\1\12\1\164\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\14\12"+
    "\1\165\5\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\166\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\10\12\1\167\1\0\7\12\1\170\5\12\1\171"+
    "\4\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\172\4\12\1\173\13\12\23\0\1\12\1\0"+
    "\1\12\6\0\1\174\10\12\1\0\14\12\1\175\5\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\6\12"+
    "\1\176\1\177\5\12\1\200\4\12\70\0\1\201\100\0"+
    "\1\202\67\0\1\203\67\0\1\204\70\0\1\205\66\0"+
    "\1\206\1\0\1\207\65\0\1\210\6\0\1\211\65\0"+
    "\1\63\1\0\1\63\1\0\5\63\4\0\53\63\11\212"+
    "\1\0\56\212\63\0\1\120\11\0\1\73\1\0\1\73"+
    "\6\0\11\73\1\0\22\73\23\0\1\73\1\0\1\75"+
    "\1\130\5\0\11\73\1\0\20\73\2\75\23\0\1\73"+
    "\1\0\1\73\6\0\1\73\1\213\7\73\1\0\22\73"+
    "\23\0\1\73\1\0\1\73\6\0\3\73\1\214\1\73"+
    "\1\215\3\73\1\0\22\73\23\0\1\73\1\0\1\73"+
    "\6\0\10\73\1\216\1\0\22\73\16\0\3\116\1\0"+
    "\5\116\1\0\56\116\4\0\1\217\72\0\1\125\1\130"+
    "\37\0\2\125\25\0\1\220\40\0\2\220\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\221\11\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\1\222"+
    "\21\12\23\0\1\12\1\0\1\12\6\0\5\12\1\223"+
    "\3\12\1\0\22\12\23\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\6\12\1\224\13\12\23\0\1\12\1\0"+
    "\1\12\6\0\3\12\1\225\5\12\1\0\22\12\23\0"+
    "\1\12\1\0\1\12\6\0\4\12\1\226\4\12\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\13\12\1\227\6\12\23\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\10\12\1\230\11\12\23\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\16\12\1\231\3\12\23\0"+
    "\1\12\1\0\1\12\6\0\3\12\1\232\5\12\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\233\5\12\1\234\3\12\1\235\6\12\23\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\1\236\21\12"+
    "\23\0\1\12\1\0\1\12\6\0\5\12\1\237\3\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\3\12"+
    "\1\240\5\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\1\12\1\241\7\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\242\11\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\1\12"+
    "\1\243\20\12\23\0\1\12\1\0\1\12\6\0\1\244"+
    "\10\12\1\0\22\12\23\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\2\12\1\245\17\12\23\0\1\12\1\0"+
    "\1\12\6\0\1\246\10\12\1\0\6\12\1\247\13\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\250\12\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\15\12\1\251\4\12\23\0\1\12\1\0\1\12"+
    "\6\0\4\12\1\252\4\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\253\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\1\12"+
    "\1\254\20\12\23\0\1\12\1\0\1\12\6\0\4\12"+
    "\1\255\4\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\17\12\1\256\2\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\257\11\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\260\12\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\1\12\1\261\11\12\1\262\6\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\263\21\12\23\0"+
    "\1\12\1\0\1\12\6\0\3\12\1\264\5\12\1\0"+
    "\7\12\1\265\12\12\23\0\1\12\1\0\1\12\6\0"+
    "\1\266\10\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\5\12\1\267\3\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\15\12\1\270\4\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\6\12"+
    "\1\271\13\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\272\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\273\11\12\101\0\1\274"+
    "\67\0\1\275\11\0\1\73\1\0\1\73\6\0\4\73"+
    "\1\276\4\73\1\0\22\73\23\0\1\73\1\0\1\73"+
    "\6\0\6\73\1\277\2\73\1\0\22\73\23\0\1\73"+
    "\1\0\1\73\6\0\2\73\1\300\6\73\1\0\22\73"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\20\12"+
    "\1\301\1\302\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\6\12\1\303\13\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\304\20\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\305\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\4\12\1\306\4\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\307\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\5\12\1\310\14\12\23\0\1\12"+
    "\1\0\1\12\6\0\2\12\1\311\6\12\1\0\22\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\15\12"+
    "\1\312\4\12\23\0\1\12\1\0\1\12\6\0\1\12"+
    "\1\313\7\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\314\11\12\23\0\1\12"+
    "\1\0\1\12\6\0\1\315\10\12\1\0\13\12\1\316"+
    "\6\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\14\12\1\317\5\12\23\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\320\6\12\1\0\22\12\23\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\2\12\1\321\17\12\23\0"+
    "\1\12\1\0\1\12\6\0\10\12\1\322\1\0\22\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\3\12"+
    "\1\323\16\12\23\0\1\12\1\0\1\12\6\0\3\12"+
    "\1\324\5\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\3\12\1\325\16\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\11\12\1\326\10\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\10\12"+
    "\1\327\11\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\330\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\331\11\12\23\0\1\12"+
    "\1\0\1\12\6\0\4\12\1\332\4\12\1\0\22\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\333\12\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\334\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\335\6\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\13\12\1\336\6\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\6\12"+
    "\1\337\13\12\23\0\1\12\1\0\1\12\6\0\1\340"+
    "\10\12\1\0\22\12\23\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\341\6\12\1\0\22\12\23\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\342\6\12\1\0\22\12\23\0"+
    "\1\12\1\0\1\12\6\0\6\12\1\343\2\12\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\10\12\1\344\11\12\23\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\10\12\1\345\11\12\23\0\1\12\1\0"+
    "\1\12\6\0\3\12\1\346\5\12\1\0\22\12\23\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\1\12\1\347"+
    "\20\12\23\0\1\12\1\0\1\12\6\0\2\12\1\350"+
    "\6\12\1\0\22\12\23\0\1\73\1\0\1\73\6\0"+
    "\2\73\1\351\6\73\1\0\22\73\23\0\1\73\1\0"+
    "\1\73\6\0\1\352\10\73\1\0\22\73\23\0\1\73"+
    "\1\0\1\73\6\0\5\73\1\353\3\73\1\0\22\73"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\354\12\12\23\0\1\12\1\0\1\12\6\0\3\12"+
    "\1\355\5\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\356\11\12\23\0\1\12"+
    "\1\0\1\12\6\0\2\12\1\357\6\12\1\0\22\12"+
    "\23\0\1\12\1\0\1\12\6\0\5\12\1\360\3\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\1\361"+
    "\10\12\1\0\22\12\23\0\1\12\1\0\1\12\6\0"+
    "\5\12\1\362\3\12\1\0\22\12\23\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\2\12\1\363\17\12\23\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\7\12\1\364"+
    "\12\12\23\0\1\12\1\0\1\12\6\0\10\12\1\365"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\366\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\367\20\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\370\20\12"+
    "\23\0\1\12\1\0\1\12\6\0\2\12\1\371\6\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\7\12\1\372\12\12\23\0\1\12\1\0\1\12"+
    "\6\0\4\12\1\373\4\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\2\12\1\374\17\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\375\12\12\23\0\1\12\1\0\1\12\6\0\7\12"+
    "\1\376\1\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\377\11\12\23\0\1\12"+
    "\1\0\1\12\6\0\6\12\1\u0100\2\12\1\0\22\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\20\12"+
    "\1\u0101\1\u0102\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\u0103\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\3\12\1\u0104\16\12\23\0\1\73"+
    "\1\0\1\73\6\0\1\73\1\u0105\7\73\1\0\22\73"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\10\12"+
    "\1\u0106\11\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\20\12\1\u0107\1\u0108\23\0\1\12\1\0\1\12"+
    "\6\0\6\12\1\u0109\2\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\2\12\1\u010a\17\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\4\12"+
    "\1\u010b\15\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\10\12\1\u010c\11\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\7\12\1\u010d\12\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\4\12\1\u010e\15\12"+
    "\23\0\1\12\1\0\1\12\6\0\11\12\1\0\10\12"+
    "\1\u010f\11\12\23\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\2\12\1\u0110\17\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\u0111\20\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\u0112\11\12"+
    "\23\0\1\12\1\0\1\12\6\0\5\12\1\u0113\3\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\u0114\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\4\12\1\u0115\4\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\6\12\1\u0116\13\12"+
    "\23\0\1\12\1\0\1\12\6\0\2\12\1\u0117\6\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\u0118\6\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\u0119\11\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\2\12\1\u011a\17\12"+
    "\23\0\1\12\1\0\1\12\6\0\1\12\1\u011b\7\12"+
    "\1\0\22\12\23\0\1\12\1\0\1\12\6\0\5\12"+
    "\1\u011c\3\12\1\0\22\12\23\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\u011d\6\12\1\0\22\12\23\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\u011e\11\12"+
    "\23\0\1\12\1\0\1\12\6\0\1\u011f\10\12\1\0"+
    "\22\12\23\0\1\12\1\0\1\12\6\0\6\12\1\u0120"+
    "\2\12\1\0\22\12\23\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\16\12\1\u0121\3\12\23\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\u0122\6\12\1\0\22\12\23\0"+
    "\1\12\1\0\1\12\6\0\6\12\1\u0123\2\12\1\0"+
    "\22\12\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10472];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\6\1\3\11\10\1\1\11\13\1\6\11"+
    "\4\1\1\11\1\1\1\11\5\1\2\11\6\1\3\11"+
    "\13\1\2\11\1\1\3\11\1\0\2\11\1\1\2\11"+
    "\1\0\50\1\3\11\1\1\3\11\1\1\2\11\4\1"+
    "\1\11\54\1\2\11\146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    FlexState state = new FlexState(YYINITIAL);
    Stack<FlexState> states = new Stack<FlexState>();
    void zzbegin(int state) {
        states.push(this.state);
        this.state = new FlexState(state);
        yybegin(state);
    }

    void zzpop() {
        this.state = states.pop();
        yybegin(this.state.getState());
    }


  ObjDLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ObjDLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { zzbegin(STRING_STATE); return ObjDTypes.STRING;
          }
        case 109: break;
        case 48: 
          { return ObjDTypes.PLUS_SET;
          }
        case 110: break;
        case 89: 
          { return ObjDTypes.TP_UINT4;
          }
        case 111: break;
        case 73: 
          { return ObjDTypes.W_CASE;
          }
        case 112: break;
        case 27: 
          { zzbegin(STRING_EXPR_STATE); return ObjDTypes.STRING_EXPR;
          }
        case 113: break;
        case 62: 
          { return ObjDTypes.TP_INT4;
          }
        case 114: break;
        case 29: 
          { zzpop(); zzpop(); return ObjDTypes.STRING;
          }
        case 115: break;
        case 97: 
          { return ObjDTypes.W_STATIC;
          }
        case 116: break;
        case 55: 
          { return ObjDTypes.W_NIL;
          }
        case 117: break;
        case 104: 
          { return ObjDTypes.W_PRIVATE;
          }
        case 118: break;
        case 20: 
          { return ObjDTypes.SET;
          }
        case 119: break;
        case 34: 
          { zzbegin(COMMENT_STATE); return ObjDTypes.COMMENT;
          }
        case 120: break;
        case 49: 
          { return ObjDTypes.PLUS_PLUS;
          }
        case 121: break;
        case 23: 
          { return ObjDTypes.EXCLAMATION;
          }
        case 122: break;
        case 42: 
          { return ObjDTypes.W_DO;
          }
        case 123: break;
        case 108: 
          { return ObjDTypes.W_SYNC;
          }
        case 124: break;
        case 6: 
          { return ObjDTypes.MINUS;
          }
        case 125: break;
        case 61: 
          { return ObjDTypes.EXACT_NOT_EQ;
          }
        case 126: break;
        case 85: 
          { return ObjDTypes.W_WHILE;
          }
        case 127: break;
        case 71: 
          { return ObjDTypes.W_PURE;
          }
        case 128: break;
        case 32: 
          { state.stringBracketCounter++; return ObjDTypes.OPEN_BRACKET;
          }
        case 129: break;
        case 95: 
          { return ObjDTypes.TP_FLOAT4;
          }
        case 130: break;
        case 79: 
          { zzpop(); return ObjDTypes.W_ELSE;
          }
        case 131: break;
        case 44: 
          { return ObjDTypes.MOREEQ;
          }
        case 132: break;
        case 13: 
          { return ObjDTypes.OPEN_BRACE;
          }
        case 133: break;
        case 16: 
          { return ObjDTypes.CLOSE_SQUARE_BRACKET;
          }
        case 134: break;
        case 67: 
          { return ObjDTypes.W_SELF;
          }
        case 135: break;
        case 39: 
          { return ObjDTypes.ARROW;
          }
        case 136: break;
        case 74: 
          { return ObjDTypes.W_TRUE;
          }
        case 137: break;
        case 37: 
          { return ObjDTypes.MUL_SET;
          }
        case 138: break;
        case 101: 
          { return ObjDTypes.W_RETURN;
          }
        case 139: break;
        case 100: 
          { return ObjDTypes.W_OBJECT;
          }
        case 140: break;
        case 107: 
          { return ObjDTypes.W_PROTECTED;
          }
        case 141: break;
        case 92: 
          { return ObjDTypes.W_BREAK;
          }
        case 142: break;
        case 46: 
          { return ObjDTypes.EQ;
          }
        case 143: break;
        case 88: 
          { return ObjDTypes.W_TRAIT;
          }
        case 144: break;
        case 3: 
          { return ObjDTypes.DIV;
          }
        case 145: break;
        case 50: 
          { return ObjDTypes.NOT_EQ;
          }
        case 146: break;
        case 11: 
          { return ObjDTypes.CLOSE_BRACKET;
          }
        case 147: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 148: break;
        case 5: 
          { return ObjDTypes.IDENT;
          }
        case 149: break;
        case 25: 
          { return ObjDTypes.STRING;
          }
        case 150: break;
        case 106: 
          { return ObjDTypes.W_ABSTRACT;
          }
        case 151: break;
        case 102: 
          { return ObjDTypes.W_EXTENDS;
          }
        case 152: break;
        case 99: 
          { return ObjDTypes.W_STRUCT;
          }
        case 153: break;
        case 84: 
          { return ObjDTypes.W_SUPER;
          }
        case 154: break;
        case 90: 
          { return ObjDTypes.TP_UINT8;
          }
        case 155: break;
        case 8: 
          { return ObjDTypes.DOT;
          }
        case 156: break;
        case 19: 
          { return ObjDTypes.LESS;
          }
        case 157: break;
        case 75: 
          { return ObjDTypes.TP_VOID;
          }
        case 158: break;
        case 18: 
          { return ObjDTypes.COLON;
          }
        case 159: break;
        case 40: 
          { return ObjDTypes.MINUS_SET;
          }
        case 160: break;
        case 14: 
          { return ObjDTypes.CLOSE_BRACE;
          }
        case 161: break;
        case 63: 
          { return ObjDTypes.TP_INT8;
          }
        case 162: break;
        case 41: 
          { return ObjDTypes.W_IF;
          }
        case 163: break;
        case 30: 
          { zzpop(); zzbegin(STRING_EXPR_STATE); return ObjDTypes.STRING_EXPR;
          }
        case 164: break;
        case 80: 
          { return ObjDTypes.W_WHEN;
          }
        case 165: break;
        case 38: 
          { return ObjDTypes.MINUS_MINUS;
          }
        case 166: break;
        case 36: 
          { return ObjDTypes.CLUE;
          }
        case 167: break;
        case 60: 
          { return ObjDTypes.EXACT_EQ;
          }
        case 168: break;
        case 26: 
          { zzpop(); return ObjDTypes.STRING;
          }
        case 169: break;
        case 51: 
          { zzpop(); return ObjDTypes.COMMENT;
          }
        case 170: break;
        case 96: 
          { return ObjDTypes.TP_FLOAT8;
          }
        case 171: break;
        case 52: 
          { return ObjDTypes.CLONE;
          }
        case 172: break;
        case 82: 
          { return ObjDTypes.TP_FLOAT;
          }
        case 173: break;
        case 58: 
          { return ObjDTypes.W_VAL;
          }
        case 174: break;
        case 7: 
          { return ObjDTypes.INT;
          }
        case 175: break;
        case 86: 
          { return ObjDTypes.W_CLASS;
          }
        case 176: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 177: break;
        case 15: 
          { return ObjDTypes.OPEN_SQUARE_BRACKET;
          }
        case 178: break;
        case 105: 
          { return ObjDTypes.W_TYPE;
          }
        case 179: break;
        case 59: 
          { return ObjDTypes.W_VAR;
          }
        case 180: break;
        case 31: 
          { zzbegin(STRING_EXPR_BRACKET_WAIT_STATE); state.stringBracketCounter++; return ObjDTypes.OPEN_BRACKET;
          }
        case 181: break;
        case 24: 
          { return ObjDTypes.COMMENT;
          }
        case 182: break;
        case 17: 
          { return ObjDTypes.COMMA;
          }
        case 183: break;
        case 10: 
          { return ObjDTypes.OPEN_BRACKET;
          }
        case 184: break;
        case 81: 
          { return ObjDTypes.W_FINAL;
          }
        case 185: break;
        case 65: 
          { return ObjDTypes.W_ENUM;
          }
        case 186: break;
        case 103: 
          { return ObjDTypes.W_PACKAGE;
          }
        case 187: break;
        case 83: 
          { return ObjDTypes.W_FALSE;
          }
        case 188: break;
        case 76: 
          { return ObjDTypes.TP_UINT;
          }
        case 189: break;
        case 77: 
          { return ObjDTypes.TP_BOOL;
          }
        case 190: break;
        case 28: 
          { if(state.stringIdent) {
            zzpop();
            return ObjDTypes.STRING;
        }
        state.stringIdent = true;
        return ObjDTypes.IDENT;
          }
        case 191: break;
        case 35: 
          { return ObjDTypes.DIV_SET;
          }
        case 192: break;
        case 4: 
          { return ObjDTypes.MUL;
          }
        case 193: break;
        case 94: 
          { return ObjDTypes.W_IMPORT;
          }
        case 194: break;
        case 21: 
          { return ObjDTypes.PLUS;
          }
        case 195: break;
        case 12: 
          { return ObjDTypes.MORE;
          }
        case 196: break;
        case 72: 
          { return ObjDTypes.TP_CHAR;
          }
        case 197: break;
        case 43: 
          { return ObjDTypes.OR;
          }
        case 198: break;
        case 98: 
          { return ObjDTypes.TP_STRING;
          }
        case 199: break;
        case 22: 
          { return ObjDTypes.WHAT;
          }
        case 200: break;
        case 33: 
          { state.stringBracketCounter--;
        if(state.stringBracketCounter <= 0) {
            zzpop();
            zzpop();
        }return ObjDTypes.CLOSE_BRACKET;
          }
        case 201: break;
        case 91: 
          { return ObjDTypes.TP_UBYTE;
          }
        case 202: break;
        case 66: 
          { return ObjDTypes.W_LAZY;
          }
        case 203: break;
        case 87: 
          { return ObjDTypes.W_THROW;
          }
        case 204: break;
        case 78: 
          { return ObjDTypes.TP_BYTE;
          }
        case 205: break;
        case 56: 
          { return ObjDTypes.W_DEF;
          }
        case 206: break;
        case 45: 
          { return ObjDTypes.LESSEQ;
          }
        case 207: break;
        case 47: 
          { return ObjDTypes.AND;
          }
        case 208: break;
        case 93: 
          { zzpop(); return ObjDTypes.W_ENDIF;
          }
        case 209: break;
        case 57: 
          { return ObjDTypes.TP_ANY;
          }
        case 210: break;
        case 68: 
          { return ObjDTypes.W_STUB;
          }
        case 211: break;
        case 64: 
          { return ObjDTypes.W_ELSE;
          }
        case 212: break;
        case 69: 
          { return ObjDTypes.W_WITH;
          }
        case 213: break;
        case 53: 
          { return ObjDTypes.FLOAT;
          }
        case 214: break;
        case 54: 
          { return ObjDTypes.TP_INT;
          }
        case 215: break;
        case 70: 
          { return ObjDTypes.W_WEAK;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
