/* The following code was generated by JFlex 1.4.3 on 4/16/14 6:37 PM */

package com.antonzherdev.objd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.antonzherdev.objd.psi.ObjDTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/16/14 6:37 PM from the specification file
 * <tt>/Users/antonzherdev/dev/objd-idea-plugin/src/com/antonzherdev/objd/ObjD.flex</tt>
 */
class ObjDLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_EXPR_BRACKET_WAIT_STATE = 8;
  public static final int COMMENT_STATE = 2;
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 4;
  public static final int STRING_EXPR_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\1\1\11\1\0\1\1\1\3\22\0\1\1\1\70"+
    "\1\13\1\0\1\14\1\0\1\65\1\0\1\15\1\27\1\4\1\67"+
    "\1\61\1\6\1\10\1\2\4\7\1\50\3\7\1\51\1\7\1\62"+
    "\1\0\1\63\1\64\1\54\1\66\1\52\32\5\1\57\1\12\1\60"+
    "\1\0\1\5\1\0\1\31\1\44\1\32\1\24\1\20\1\17\1\34"+
    "\1\26\1\16\1\47\1\33\1\21\1\35\1\23\1\36\1\30\1\5"+
    "\1\37\1\22\1\40\1\43\1\41\1\25\1\42\1\45\1\46\1\55"+
    "\1\53\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\10\5\1\13\11\5\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\1\1\26\1\27\1\30\3\31\3\32\1\33"+
    "\1\34\3\33\1\35\1\33\1\35\1\36\1\37\1\40"+
    "\3\35\10\33\1\3\1\41\1\42\1\31\1\43\1\44"+
    "\1\45\1\0\1\46\1\47\1\7\1\50\1\51\1\0"+
    "\1\52\17\5\1\53\30\5\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\32\1\52"+
    "\3\35\1\66\1\67\1\5\1\70\16\5\1\71\1\72"+
    "\7\5\1\73\12\5\1\74\1\5\1\75\1\76\6\5"+
    "\1\77\1\100\3\35\1\5\1\101\1\102\4\5\1\103"+
    "\1\104\1\5\1\105\1\106\3\5\1\107\2\5\1\110"+
    "\1\111\4\5\1\112\2\5\1\113\1\114\5\5\1\115"+
    "\1\5\1\116\1\117\1\5\1\120\1\5\1\121\1\122"+
    "\1\35\1\123\2\5\1\124\1\125\1\126\4\5\1\127"+
    "\1\5\1\130\4\5\1\131\3\5\1\132\1\133\1\5"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\5"+
    "\1\143\1\144\1\5\1\145\1\146\1\147\6\5\1\150"+
    "\1\151\1\5\1\152\1\153\1\5\1\154\1\155\3\5"+
    "\1\156\2\5\1\157\1\160\1\5\1\161\2\5\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u011d\0\u011d\0\u011d\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u011d"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u011d\0\u0675\0\u06ae\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u011d\0\u0156\0\u083d\0\u0876\0\u0156\0\u08af\0\u011d\0\u011d"+
    "\0\u0156\0\u08e8\0\u01c8\0\u0921\0\u023a\0\u095a\0\u011d\0\u011d"+
    "\0\u011d\0\u0993\0\u09cc\0\u0a05\0\u0675\0\u06ae\0\u06e7\0\u0720"+
    "\0\u0759\0\u0792\0\u07cb\0\u0804\0\u08e8\0\u011d\0\u011d\0\u0a3e"+
    "\0\u011d\0\u011d\0\u011d\0\u0a77\0\u011d\0\u011d\0\u0ab0\0\u011d"+
    "\0\u011d\0\u0ae9\0\u0201\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0201\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u011d\0\u011d\0\u011d\0\u13d1\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u140a\0\u011d\0\u011d\0\u0921\0\u1443"+
    "\0\u147c\0\u14b5\0\u011d\0\u0ae9\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u0201\0\u0201\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u0201\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u0201\0\u1c47\0\u0201\0\u0201\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u011d\0\u011d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u0201\0\u0201\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u0201\0\u0201"+
    "\0\u1f9e\0\u0201\0\u0201\0\u1fd7\0\u2010\0\u2049\0\u0201\0\u2082"+
    "\0\u20bb\0\u0201\0\u0201\0\u20f4\0\u212d\0\u2166\0\u219f\0\u0201"+
    "\0\u21d8\0\u2211\0\u0201\0\u0201\0\u224a\0\u2283\0\u22bc\0\u22f5"+
    "\0\u232e\0\u0201\0\u2367\0\u0201\0\u23a0\0\u23d9\0\u0201\0\u2412"+
    "\0\u0201\0\u0921\0\u244b\0\u0921\0\u2484\0\u24bd\0\u24f6\0\u252f"+
    "\0\u0201\0\u2568\0\u25a1\0\u25da\0\u2613\0\u0201\0\u264c\0\u0201"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u0201\0\u2769\0\u27a2\0\u27db"+
    "\0\u0201\0\u0201\0\u2814\0\u0201\0\u0201\0\u0201\0\u0201\0\u0921"+
    "\0\u0201\0\u0201\0\u284d\0\u0201\0\u0201\0\u2886\0\u0201\0\u0201"+
    "\0\u0201\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u0201"+
    "\0\u0201\0\u2a15\0\u0201\0\u0201\0\u2a4e\0\u0201\0\u0201\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u0201\0\u2b32\0\u2b6b\0\u0201\0\u0201\0\u2ba4"+
    "\0\u0201\0\u2bdd\0\u2c16\0\u0201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\7\1\6\1\16\1\6\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\12\1\30"+
    "\1\31\1\32\1\33\3\12\1\34\1\35\1\36\1\37"+
    "\1\12\1\40\1\41\3\12\2\14\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\61\1\62"+
    "\1\63\4\61\1\7\57\61\1\64\1\65\1\64\1\65"+
    "\5\64\1\7\1\66\1\67\1\70\54\64\1\67\1\71"+
    "\1\72\1\71\1\73\1\74\1\75\1\76\1\67\1\7"+
    "\1\67\1\77\1\100\1\101\1\102\1\74\1\103\4\74"+
    "\1\104\1\74\1\67\20\74\2\76\1\67\1\105\1\106"+
    "\6\67\1\107\1\110\1\111\1\112\1\113\1\114\1\6"+
    "\1\7\1\115\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\7\1\6\1\16\1\6\1\116\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\12\1\117\1\31"+
    "\1\32\1\33\3\12\1\34\1\35\1\36\1\37\1\12"+
    "\1\40\1\41\3\12\2\14\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\72\0\1\7\1\0\1\7\5\0"+
    "\1\7\61\0\1\120\1\0\1\121\57\0\1\122\10\0"+
    "\1\123\46\0\1\124\10\0\1\125\11\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\22\12\25\0\1\126\1\127"+
    "\40\0\2\127\2\0\1\130\7\0\1\131\11\0\1\12"+
    "\1\0\1\14\1\132\5\0\11\12\1\0\20\12\2\14"+
    "\24\0\1\12\1\0\1\12\6\0\1\12\1\133\3\12"+
    "\1\134\3\12\1\0\5\12\1\135\14\12\24\0\1\12"+
    "\1\0\1\12\6\0\1\136\2\12\1\137\5\12\1\0"+
    "\1\12\1\140\20\12\24\0\1\12\1\0\1\12\6\0"+
    "\3\12\1\141\1\12\1\142\3\12\1\0\12\12\1\143"+
    "\7\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\144\20\12\24\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\145\6\12\1\0\10\12\1\146\2\12\1\147"+
    "\1\12\1\150\4\12\24\0\1\12\1\0\1\12\6\0"+
    "\1\151\10\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\152\6\12\1\0\6\12\1\153\13\12"+
    "\24\0\1\12\1\0\1\12\6\0\1\154\1\12\1\155"+
    "\5\12\1\156\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\157\5\12\1\160\3\12"+
    "\1\161\6\12\24\0\1\12\1\0\1\12\6\0\5\12"+
    "\1\162\3\12\1\0\14\12\1\163\5\12\24\0\1\12"+
    "\1\0\1\12\6\0\3\12\1\164\4\12\1\165\1\0"+
    "\1\12\1\166\20\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\11\12\1\167\2\12\1\170\5\12\24\0"+
    "\1\12\1\0\1\12\6\0\2\12\1\171\6\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\10\12\1\172"+
    "\1\0\7\12\1\173\5\12\1\174\4\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\175\4\12"+
    "\1\176\13\12\24\0\1\12\1\0\1\12\6\0\1\177"+
    "\10\12\1\0\14\12\1\200\5\12\24\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\6\12\1\201\1\202\5\12"+
    "\1\203\4\12\72\0\1\204\101\0\1\205\70\0\1\206"+
    "\70\0\1\207\71\0\1\210\13\0\1\211\144\0\1\212"+
    "\2\0\1\213\65\0\1\214\6\0\1\215\66\0\1\64"+
    "\1\0\1\64\1\0\5\64\4\0\54\64\11\216\1\0"+
    "\57\216\64\0\1\122\11\0\1\74\1\0\1\74\6\0"+
    "\11\74\1\0\22\74\24\0\1\74\1\0\1\76\1\132"+
    "\5\0\11\74\1\0\20\74\2\76\24\0\1\74\1\0"+
    "\1\74\6\0\1\74\1\217\7\74\1\0\22\74\24\0"+
    "\1\74\1\0\1\74\6\0\3\74\1\220\1\74\1\221"+
    "\3\74\1\0\22\74\24\0\1\74\1\0\1\74\6\0"+
    "\10\74\1\222\1\0\22\74\17\0\3\120\1\0\5\120"+
    "\1\0\57\120\4\0\1\223\73\0\1\127\1\132\37\0"+
    "\2\127\26\0\1\224\40\0\2\224\24\0\1\12\1\0"+
    "\1\12\6\0\3\12\1\225\5\12\1\0\10\12\1\226"+
    "\11\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\227\21\12\24\0\1\12\1\0\1\12\6\0\5\12"+
    "\1\230\3\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\6\12\1\231\13\12\24\0\1\12"+
    "\1\0\1\12\6\0\3\12\1\232\5\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\4\12\1\233\4\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\13\12\1\234\6\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\10\12\1\235\11\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\16\12\1\236\3\12"+
    "\24\0\1\12\1\0\1\12\6\0\3\12\1\237\5\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\1\12\1\240\5\12\1\241\3\12\1\242\6\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\1\243"+
    "\21\12\24\0\1\12\1\0\1\12\6\0\5\12\1\244"+
    "\3\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\3\12\1\245\5\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\1\12\1\246\7\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\10\12\1\247"+
    "\11\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\250\20\12\24\0\1\12\1\0\1\12\6\0"+
    "\1\251\10\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\2\12\1\252\17\12\24\0\1\12"+
    "\1\0\1\12\6\0\1\253\10\12\1\0\6\12\1\254"+
    "\13\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\7\12\1\255\12\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\15\12\1\256\4\12\24\0\1\12\1\0"+
    "\1\12\6\0\4\12\1\257\4\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\1\12\1\260"+
    "\20\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\1\12\1\261\20\12\24\0\1\12\1\0\1\12\6\0"+
    "\4\12\1\262\4\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\263\6\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\17\12\1\264"+
    "\2\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\10\12\1\265\11\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\7\12\1\266\12\12\24\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\1\12\1\267\11\12\1\270"+
    "\1\12\1\271\4\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\1\272\21\12\24\0\1\12\1\0\1\12"+
    "\6\0\3\12\1\273\5\12\1\0\7\12\1\274\12\12"+
    "\24\0\1\12\1\0\1\12\6\0\1\275\10\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\5\12\1\276"+
    "\3\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\15\12\1\277\4\12\24\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\6\12\1\300\13\12\24\0"+
    "\1\12\1\0\1\12\6\0\2\12\1\301\6\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\10\12\1\302\11\12\103\0\1\303\70\0\1\304\11\0"+
    "\1\74\1\0\1\74\6\0\4\74\1\305\4\74\1\0"+
    "\22\74\24\0\1\74\1\0\1\74\6\0\6\74\1\306"+
    "\2\74\1\0\22\74\24\0\1\74\1\0\1\74\6\0"+
    "\2\74\1\307\6\74\1\0\22\74\24\0\1\12\1\0"+
    "\1\12\6\0\1\310\10\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\20\12\1\311\1\312"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\6\12"+
    "\1\313\13\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\1\12\1\314\20\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\315\20\12\24\0\1\12"+
    "\1\0\1\12\6\0\4\12\1\316\4\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\2\12\1\317\6\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\5\12\1\320\14\12\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\321\6\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\15\12\1\322\4\12"+
    "\24\0\1\12\1\0\1\12\6\0\1\12\1\323\7\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\10\12\1\324\11\12\24\0\1\12\1\0\1\12"+
    "\6\0\1\325\10\12\1\0\13\12\1\326\6\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\14\12\1\327"+
    "\5\12\24\0\1\12\1\0\1\12\6\0\2\12\1\330"+
    "\6\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\2\12\1\331\17\12\24\0\1\12\1\0"+
    "\1\12\6\0\10\12\1\332\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\3\12\1\333\16\12"+
    "\24\0\1\12\1\0\1\12\6\0\3\12\1\334\5\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\3\12\1\335\16\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\11\12\1\336\10\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\337\11\12"+
    "\24\0\1\12\1\0\1\12\6\0\2\12\1\340\6\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\10\12\1\341\11\12\24\0\1\12\1\0\1\12"+
    "\6\0\4\12\1\342\4\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\7\12\1\343\12\12"+
    "\24\0\1\12\1\0\1\12\6\0\2\12\1\344\6\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\7\12\1\345\12\12\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\346\6\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\13\12\1\347\6\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\6\12"+
    "\1\350\13\12\24\0\1\12\1\0\1\12\6\0\1\351"+
    "\10\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\352\6\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\353\6\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\6\12\1\354\2\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\10\12\1\355\11\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\10\12\1\356\11\12\24\0\1\12\1\0"+
    "\1\12\6\0\3\12\1\357\5\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\1\12\1\360"+
    "\20\12\24\0\1\12\1\0\1\12\6\0\2\12\1\361"+
    "\6\12\1\0\22\12\24\0\1\74\1\0\1\74\6\0"+
    "\2\74\1\362\6\74\1\0\22\74\24\0\1\74\1\0"+
    "\1\74\6\0\1\363\10\74\1\0\22\74\24\0\1\74"+
    "\1\0\1\74\6\0\5\74\1\364\3\74\1\0\22\74"+
    "\24\0\1\12\1\0\1\12\6\0\5\12\1\365\3\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\7\12\1\366\12\12\24\0\1\12\1\0\1\12"+
    "\6\0\3\12\1\367\5\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\370\11\12"+
    "\24\0\1\12\1\0\1\12\6\0\2\12\1\371\6\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\5\12"+
    "\1\372\3\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\1\373\10\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\5\12\1\374\3\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\2\12\1\375"+
    "\17\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\7\12\1\376\12\12\24\0\1\12\1\0\1\12\6\0"+
    "\10\12\1\377\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\u0100\6\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\1\12\1\u0101\20\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\1\12"+
    "\1\u0102\20\12\24\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\u0103\6\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\7\12\1\u0104\12\12\24\0\1\12"+
    "\1\0\1\12\6\0\4\12\1\u0105\4\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\7\12"+
    "\1\u0106\12\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\2\12\1\u0107\17\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\7\12\1\u0108\12\12\24\0\1\12"+
    "\1\0\1\12\6\0\7\12\1\u0109\1\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\10\12"+
    "\1\u010a\11\12\24\0\1\12\1\0\1\12\6\0\6\12"+
    "\1\u010b\2\12\1\0\22\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\20\12\1\u010c\1\u010d\24\0\1\12"+
    "\1\0\1\12\6\0\2\12\1\u010e\6\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\3\12"+
    "\1\u010f\16\12\24\0\1\74\1\0\1\74\6\0\1\74"+
    "\1\u0110\7\74\1\0\22\74\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\u0111\6\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\10\12\1\u0112\11\12"+
    "\24\0\1\12\1\0\1\12\6\0\3\12\1\u0113\5\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\20\12\1\u0114\1\u0115\24\0\1\12\1\0\1\12"+
    "\6\0\6\12\1\u0116\2\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\2\12\1\u0117\17\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\4\12"+
    "\1\u0118\15\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\10\12\1\u0119\11\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\7\12\1\u011a\12\12\24\0\1\12"+
    "\1\0\1\12\6\0\11\12\1\0\4\12\1\u011b\15\12"+
    "\24\0\1\12\1\0\1\12\6\0\11\12\1\0\10\12"+
    "\1\u011c\11\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\2\12\1\u011d\17\12\24\0\1\12\1\0\1\12"+
    "\6\0\11\12\1\0\1\12\1\u011e\20\12\24\0\1\12"+
    "\1\0\1\12\6\0\1\u011f\10\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\10\12\1\u0120"+
    "\11\12\24\0\1\12\1\0\1\12\6\0\5\12\1\u0121"+
    "\3\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\u0122\6\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\11\12\1\0\15\12\1\u0123\4\12\24\0"+
    "\1\12\1\0\1\12\6\0\4\12\1\u0124\4\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\6\12\1\u0125\13\12\24\0\1\12\1\0\1\12\6\0"+
    "\2\12\1\u0126\6\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\u0127\6\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\11\12\1\0\10\12\1\u0128"+
    "\11\12\24\0\1\12\1\0\1\12\6\0\11\12\1\0"+
    "\2\12\1\u0129\17\12\24\0\1\12\1\0\1\12\6\0"+
    "\6\12\1\u012a\2\12\1\0\22\12\24\0\1\12\1\0"+
    "\1\12\6\0\1\12\1\u012b\7\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\5\12\1\u012c\3\12\1\0"+
    "\22\12\24\0\1\12\1\0\1\12\6\0\2\12\1\u012d"+
    "\6\12\1\0\22\12\24\0\1\12\1\0\1\12\6\0"+
    "\11\12\1\0\10\12\1\u012e\11\12\24\0\1\12\1\0"+
    "\1\12\6\0\2\12\1\u012f\6\12\1\0\22\12\24\0"+
    "\1\12\1\0\1\12\6\0\1\u0130\10\12\1\0\22\12"+
    "\24\0\1\12\1\0\1\12\6\0\6\12\1\u0131\2\12"+
    "\1\0\22\12\24\0\1\12\1\0\1\12\6\0\11\12"+
    "\1\0\16\12\1\u0132\3\12\24\0\1\12\1\0\1\12"+
    "\6\0\2\12\1\u0133\6\12\1\0\22\12\24\0\1\12"+
    "\1\0\1\12\6\0\6\12\1\u0134\2\12\1\0\22\12"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11343];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\6\1\3\11\10\1\1\11\11\1\1\11"+
    "\2\1\6\11\6\1\1\11\5\1\2\11\6\1\3\11"+
    "\14\1\2\11\1\1\3\11\1\0\2\11\1\1\2\11"+
    "\1\0\51\1\3\11\1\1\4\11\1\1\2\11\4\1"+
    "\1\11\57\1\2\11\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    FlexState state = new FlexState(YYINITIAL);
    Stack<FlexState> states = new Stack<FlexState>();
    void zzbegin(int state) {
        states.push(this.state);
        this.state = new FlexState(state);
        yybegin(state);
    }

    void zzpop() {
        this.state = states.pop();
        yybegin(this.state.getState());
    }


  ObjDLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ObjDLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { zzbegin(STRING_STATE); return ObjDTypes.STRING;
          }
        case 115: break;
        case 50: 
          { return ObjDTypes.PLUS_SET;
          }
        case 116: break;
        case 92: 
          { return ObjDTypes.TP_UINT4;
          }
        case 117: break;
        case 76: 
          { return ObjDTypes.W_CASE;
          }
        case 118: break;
        case 28: 
          { zzbegin(STRING_EXPR_STATE); return ObjDTypes.STRING_EXPR;
          }
        case 119: break;
        case 97: 
          { return ObjDTypes.W_INLINE;
          }
        case 120: break;
        case 65: 
          { return ObjDTypes.TP_INT4;
          }
        case 121: break;
        case 30: 
          { zzpop(); zzpop(); return ObjDTypes.STRING;
          }
        case 122: break;
        case 106: 
          { return ObjDTypes.W_FINALLY;
          }
        case 123: break;
        case 101: 
          { return ObjDTypes.W_STATIC;
          }
        case 124: break;
        case 57: 
          { return ObjDTypes.W_NIL;
          }
        case 125: break;
        case 109: 
          { return ObjDTypes.W_PRIVATE;
          }
        case 126: break;
        case 21: 
          { return ObjDTypes.SET;
          }
        case 127: break;
        case 35: 
          { zzbegin(COMMENT_STATE); return ObjDTypes.COMMENT;
          }
        case 128: break;
        case 51: 
          { return ObjDTypes.PLUS_PLUS;
          }
        case 129: break;
        case 24: 
          { return ObjDTypes.EXCLAMATION;
          }
        case 130: break;
        case 43: 
          { return ObjDTypes.W_DO;
          }
        case 131: break;
        case 114: 
          { return ObjDTypes.W_SYNC;
          }
        case 132: break;
        case 6: 
          { return ObjDTypes.MINUS;
          }
        case 133: break;
        case 64: 
          { return ObjDTypes.EXACT_NOT_EQ;
          }
        case 134: break;
        case 88: 
          { return ObjDTypes.W_WHILE;
          }
        case 135: break;
        case 74: 
          { return ObjDTypes.W_PURE;
          }
        case 136: break;
        case 33: 
          { state.stringBracketCounter++; return ObjDTypes.OPEN_BRACKET;
          }
        case 137: break;
        case 99: 
          { return ObjDTypes.TP_FLOAT4;
          }
        case 138: break;
        case 82: 
          { zzpop(); return ObjDTypes.W_ELSE;
          }
        case 139: break;
        case 45: 
          { return ObjDTypes.MOREEQ;
          }
        case 140: break;
        case 14: 
          { return ObjDTypes.OPEN_BRACE;
          }
        case 141: break;
        case 17: 
          { return ObjDTypes.CLOSE_SQUARE_BRACKET;
          }
        case 142: break;
        case 70: 
          { return ObjDTypes.W_SELF;
          }
        case 143: break;
        case 40: 
          { return ObjDTypes.ARROW;
          }
        case 144: break;
        case 77: 
          { return ObjDTypes.W_TRUE;
          }
        case 145: break;
        case 38: 
          { return ObjDTypes.MUL_SET;
          }
        case 146: break;
        case 105: 
          { return ObjDTypes.W_RETURN;
          }
        case 147: break;
        case 104: 
          { return ObjDTypes.W_OBJECT;
          }
        case 148: break;
        case 113: 
          { return ObjDTypes.W_PROTECTED;
          }
        case 149: break;
        case 95: 
          { return ObjDTypes.W_BREAK;
          }
        case 150: break;
        case 47: 
          { return ObjDTypes.EQ;
          }
        case 151: break;
        case 91: 
          { return ObjDTypes.W_TRAIT;
          }
        case 152: break;
        case 3: 
          { return ObjDTypes.DIV;
          }
        case 153: break;
        case 52: 
          { return ObjDTypes.NOT_EQ;
          }
        case 154: break;
        case 11: 
          { return ObjDTypes.CLOSE_BRACKET;
          }
        case 155: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 156: break;
        case 5: 
          { return ObjDTypes.IDENT;
          }
        case 157: break;
        case 26: 
          { return ObjDTypes.STRING;
          }
        case 158: break;
        case 111: 
          { return ObjDTypes.W_ABSTRACT;
          }
        case 159: break;
        case 107: 
          { return ObjDTypes.W_EXTENDS;
          }
        case 160: break;
        case 103: 
          { return ObjDTypes.W_STRUCT;
          }
        case 161: break;
        case 87: 
          { return ObjDTypes.W_SUPER;
          }
        case 162: break;
        case 93: 
          { return ObjDTypes.TP_UINT8;
          }
        case 163: break;
        case 8: 
          { return ObjDTypes.DOT;
          }
        case 164: break;
        case 20: 
          { return ObjDTypes.LESS;
          }
        case 165: break;
        case 78: 
          { return ObjDTypes.TP_VOID;
          }
        case 166: break;
        case 19: 
          { return ObjDTypes.COLON;
          }
        case 167: break;
        case 41: 
          { return ObjDTypes.MINUS_SET;
          }
        case 168: break;
        case 15: 
          { return ObjDTypes.CLOSE_BRACE;
          }
        case 169: break;
        case 66: 
          { return ObjDTypes.TP_INT8;
          }
        case 170: break;
        case 42: 
          { return ObjDTypes.W_IF;
          }
        case 171: break;
        case 31: 
          { zzpop(); zzbegin(STRING_EXPR_STATE); return ObjDTypes.STRING_EXPR;
          }
        case 172: break;
        case 83: 
          { return ObjDTypes.W_WHEN;
          }
        case 173: break;
        case 39: 
          { return ObjDTypes.MINUS_MINUS;
          }
        case 174: break;
        case 37: 
          { return ObjDTypes.CLUE;
          }
        case 175: break;
        case 63: 
          { return ObjDTypes.EXACT_EQ;
          }
        case 176: break;
        case 27: 
          { zzpop(); return ObjDTypes.STRING;
          }
        case 177: break;
        case 53: 
          { zzpop(); return ObjDTypes.COMMENT;
          }
        case 178: break;
        case 100: 
          { return ObjDTypes.TP_FLOAT8;
          }
        case 179: break;
        case 54: 
          { return ObjDTypes.CLONE;
          }
        case 180: break;
        case 85: 
          { return ObjDTypes.TP_FLOAT;
          }
        case 181: break;
        case 61: 
          { return ObjDTypes.W_VAL;
          }
        case 182: break;
        case 49: 
          { return ObjDTypes.NULLDOT;
          }
        case 183: break;
        case 7: 
          { return ObjDTypes.INT;
          }
        case 184: break;
        case 89: 
          { return ObjDTypes.W_CLASS;
          }
        case 185: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 186: break;
        case 16: 
          { return ObjDTypes.OPEN_SQUARE_BRACKET;
          }
        case 187: break;
        case 110: 
          { return ObjDTypes.W_TYPE;
          }
        case 188: break;
        case 62: 
          { return ObjDTypes.W_VAR;
          }
        case 189: break;
        case 32: 
          { zzbegin(STRING_EXPR_BRACKET_WAIT_STATE); state.stringBracketCounter++; return ObjDTypes.OPEN_BRACKET;
          }
        case 190: break;
        case 25: 
          { return ObjDTypes.COMMENT;
          }
        case 191: break;
        case 18: 
          { return ObjDTypes.COMMA;
          }
        case 192: break;
        case 10: 
          { return ObjDTypes.OPEN_BRACKET;
          }
        case 193: break;
        case 84: 
          { return ObjDTypes.W_FINAL;
          }
        case 194: break;
        case 68: 
          { return ObjDTypes.W_ENUM;
          }
        case 195: break;
        case 108: 
          { return ObjDTypes.W_PACKAGE;
          }
        case 196: break;
        case 86: 
          { return ObjDTypes.W_FALSE;
          }
        case 197: break;
        case 79: 
          { return ObjDTypes.TP_UINT;
          }
        case 198: break;
        case 80: 
          { return ObjDTypes.TP_BOOL;
          }
        case 199: break;
        case 29: 
          { if(state.stringIdent) {
            zzpop();
            return ObjDTypes.STRING;
        }
        state.stringIdent = true;
        return ObjDTypes.IDENT;
          }
        case 200: break;
        case 36: 
          { return ObjDTypes.DIV_SET;
          }
        case 201: break;
        case 4: 
          { return ObjDTypes.MUL;
          }
        case 202: break;
        case 98: 
          { return ObjDTypes.W_IMPORT;
          }
        case 203: break;
        case 23: 
          { return ObjDTypes.PLUS;
          }
        case 204: break;
        case 13: 
          { return ObjDTypes.MORE;
          }
        case 205: break;
        case 75: 
          { return ObjDTypes.TP_CHAR;
          }
        case 206: break;
        case 44: 
          { return ObjDTypes.OR;
          }
        case 207: break;
        case 102: 
          { return ObjDTypes.TP_STRING;
          }
        case 208: break;
        case 22: 
          { return ObjDTypes.WHAT;
          }
        case 209: break;
        case 34: 
          { state.stringBracketCounter--;
        if(state.stringBracketCounter <= 0) {
            zzpop();
            zzpop();
        }return ObjDTypes.CLOSE_BRACKET;
          }
        case 210: break;
        case 60: 
          { return ObjDTypes.W_TRY;
          }
        case 211: break;
        case 94: 
          { return ObjDTypes.TP_UBYTE;
          }
        case 212: break;
        case 12: 
          { return ObjDTypes.AT;
          }
        case 213: break;
        case 69: 
          { return ObjDTypes.W_LAZY;
          }
        case 214: break;
        case 90: 
          { return ObjDTypes.W_THROW;
          }
        case 215: break;
        case 81: 
          { return ObjDTypes.TP_BYTE;
          }
        case 216: break;
        case 58: 
          { return ObjDTypes.W_DEF;
          }
        case 217: break;
        case 46: 
          { return ObjDTypes.LESSEQ;
          }
        case 218: break;
        case 48: 
          { return ObjDTypes.AND;
          }
        case 219: break;
        case 96: 
          { zzpop(); return ObjDTypes.W_ENDIF;
          }
        case 220: break;
        case 112: 
          { return ObjDTypes.W_OVERRIDE;
          }
        case 221: break;
        case 59: 
          { return ObjDTypes.TP_ANY;
          }
        case 222: break;
        case 71: 
          { return ObjDTypes.W_STUB;
          }
        case 223: break;
        case 67: 
          { return ObjDTypes.W_ELSE;
          }
        case 224: break;
        case 72: 
          { return ObjDTypes.W_WITH;
          }
        case 225: break;
        case 55: 
          { return ObjDTypes.FLOAT;
          }
        case 226: break;
        case 56: 
          { return ObjDTypes.TP_INT;
          }
        case 227: break;
        case 73: 
          { return ObjDTypes.W_WEAK;
          }
        case 228: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
