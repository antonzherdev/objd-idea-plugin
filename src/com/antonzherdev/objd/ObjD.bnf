{
  parserClass="com.antonzherdev.objd.parser.ObjDParser"
  stubParserClass="com.antonzherdev.objd.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ObjD"
  psiImplClassSuffix="Impl"
  psiPackage="com.antonzherdev.objd.psi"
  psiImplPackage="com.antonzherdev.objd.psi.impl"

  elementTypeHolderClass="com.antonzherdev.objd.psi.ObjDTypes"
  elementTypeClass="com.antonzherdev.objd.psi.ObjDElementType"
  tokenTypeClass="com.antonzherdev.objd.psi.ObjDTokenType"
}

file ::= statement_*

private statement_ ::= ((W_STUB? (class_statement | def_statement | field_statement))|import_statement |COMMENT)

import_statement ::= (W_IMPORT IDENT)

class_statement ::= ((W_CLASS | W_TRAIT | W_STRUCT | W_ENUM) IDENT expr_call_generics? class_constructor_fields? class_extends? class_body?)

private class_constructor_fields ::= (OPEN_BRACKET class_constructor_field (COMMA class_constructor_field)* CLOSE_BRACKET)
private class_constructor_field ::= ((W_VAR | W_VAL)? IDENT COLON data_type (SET expr_)?)

private class_extends ::= (W_EXTENDS IDENT data_type_generics?)

class_body ::= (OPEN_BRACE (def_statement | field_statement | expr_)* CLOSE_BRACE)

field_statement ::= (field_mods* (W_VAR | W_VAL)? IDENT (COLON data_type)? (SET expr_)?) field_description?
private field_mods ::= (W_PRIVATE | W_STATIC)
private field_description ::= (LINE field_description_statement*)
private field_description_statement ::= (W_PRIVATE? (W_GET | W_SET) (SET expr_)?)

def_statement ::= (def_mods* W_DEF (IDENT | W_SET | W_GET) expr_call_generics? def_parameters? (COLON data_type)? SET? expr_?)
private def_parameters ::= (OPEN_BRACKET def_parameter (COMMA def_parameter)* CLOSE_BRACKET)
private def_parameter ::= (param_name? COLON data_type (SET expr_)?)
private def_mods ::= (W_PRIVATE | W_STATIC)
private param_name ::= (IDENT | W_ELSE | W_DEF)

private data_type ::= (data_type_simple| data_type_collection | data_type_tuple) WHAT? (ARROW data_type)?
private data_type_simple ::= ((IDENT | TP_BOOL | TP_STRING | TP_INT | TP_UINT | TP_FLOAT | TP_VOID) data_type_generics? (ARROW data_type)?)
private data_type_generics ::= LESS data_type (COMMA data_type)* MORE
private data_type_collection ::= OPEN_SQUARE_BRACKET data_type CLOSE_SQUARE_BRACKET
private data_type_tuple ::= OPEN_BRACKET data_type? (COMMA data_type)* CLOSE_BRACKET

private expr_ ::= ((expr_if | expr_braces | expr_lambda | expr_call | expr_arr | expr_val | expr_brackets | expr_minus | W_NIL | W_TRUE | W_FALSE | STRING) (expr_op | index_op | post_op)?)
private expr_minus ::= MINUS expr_
private post_op ::= PLUS_PLUS | MINUS_MINUS
private expr_brackets ::= OPEN_BRACKET expr_ CLOSE_BRACKET
private expr_if ::= (W_IF OPEN_BRACKET expr_ CLOSE_BRACKET expr_ (W_ELSE expr_)?)
private expr_op ::= ((DOT | SET | PLUS | MINUS | MUL | DIV | AND | OR | EQ| MORE | LESS| MOREEQ| LESSEQ) expr_)
private expr_call ::= IDENT expr_call_generics? expr_call_params?
private expr_call_generics ::= LESS data_type (COMMA data_type)* MORE
private expr_call_params ::= OPEN_BRACKET expr_call_param? (COMMA expr_call_param)* CLOSE_BRACKET
private expr_call_param ::= (param_name SET)? expr_
private expr_braces ::= (OPEN_BRACE expr_* CLOSE_BRACE)
private expr_arr ::= OPEN_SQUARE_BRACKET expr_? (COMMA expr_)* CLOSE_SQUARE_BRACKET
private expr_val ::= (W_VAL | W_VAR) IDENT (COLON data_type)? (SET expr_)?
private index_op ::= OPEN_SQUARE_BRACKET expr_ CLOSE_SQUARE_BRACKET
private expr_lambda ::= lambda_par (COMMA lambda_par)* ARROW expr_
private lambda_par ::= IDENT (COLON data_type)?
