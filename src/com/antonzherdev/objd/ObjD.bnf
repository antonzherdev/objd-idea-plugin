{
  parserClass="com.antonzherdev.objd.parser.ObjDParser"
  stubParserClass="com.antonzherdev.objd.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ObjD"
  psiImplClassSuffix="Impl"
  psiPackage="com.antonzherdev.objd.psi"
  psiImplPackage="com.antonzherdev.objd.psi.impl"

  elementTypeHolderClass="com.antonzherdev.objd.psi.ObjDTypes"
  elementTypeClass="com.antonzherdev.objd.psi.ObjDElementType"
  tokenTypeClass="com.antonzherdev.objd.psi.ObjDTokenType"

  psiImplUtilClass="com.antonzherdev.objd.psi.impl.ObjDPsiImplUtil"
}

file ::= pack_statement statement_*
pack_statement ::= W_PACKAGE pack_part (DOT pack_part)*
pack_part ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
                        methods=[getName setName getNameIdentifier]}

private statement_ ::= (W_STUB? class_statement | W_STUB def_statement | W_STUB field_statement | type_statement | import_statement |COMMENT)

import_statement ::= W_IMPORT import_part (DOT import_part)*
import_part ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
                                                           methods=[getName setName getNameIdentifier getReference] }
type_statement ::= (W_TYPE class_name class_generics? SET class_extends) {
    methods = [getClassExtendsList]
    implements = "com.antonzherdev.objd.psi.ObjDClass"
}
class_statement ::= W_PRIVATE? class_type class_name class_generics? class_constructor_fields? (W_EXTENDS class_extends expr_call_params? (W_WITH class_extends)* )? class_body? {
    methods = [isEnum]
    implements = "com.antonzherdev.objd.psi.ObjDClass"
}
class_type ::= (W_CLASS | W_OBJECT | W_TRAIT | W_STRUCT | W_ENUM)
class_generics ::= LESS class_generic (COMMA class_generic)* MORE
class_generic ::= class_name (W_EXTENDS data_type)?
class_name ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
               methods=[getName setName getNameIdentifier]}

private class_constructor_fields ::= (OPEN_BRACKET class_constructor_field (COMMA class_constructor_field)* CLOSE_BRACKET)
class_constructor_field ::= (W_WEAK? (W_VAR | W_VAL)? def_name COLON data_type (SET expr_)?)
def_name ::= (IDENT | W_CLASS | W_TYPE)
    {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier]}

class_extends ::=  data_type_ref data_type_generics?

class_body ::= (OPEN_BRACE enum_item* (def_statement | field_statement)* CLOSE_BRACE)

enum_item ::= def_name expr_call_params?

field_statement ::= (mods (W_VAR | W_VAL)? def_name (COLON data_type)? (SET expr_)?)  {methods = [isStatic]}
mods ::= mod*
private mod ::= static_mod | weak_mod | private_mod | protected_mod | lazy_mod
private lazy_mod ::= W_LAZY {extends = mod}
private protected_mod ::= W_PROTECTED {extends = mod}
private static_mod ::= W_STATIC {extends = mod}
private weak_mod ::= W_WEAK {extends = mod}
private private_mod ::= W_PRIVATE {extends = mod}

def_statement ::= (mods W_DEF def_name class_generics? def_parameters? (COLON data_type)? (SET expr_ | expr_braces)?) {methods = [isStatic]}
private def_parameters ::= (OPEN_BRACKET def_parameter? (COMMA def_parameter)* CLOSE_BRACKET)
def_parameter ::= ((def_name | W_SELF)? COLON data_type (SET expr_)?)

data_type ::= (data_type_lambda | data_type_option | data_type_collection | data_type_map | data_type_tuple | data_type_simple | data_type_self)
data_type_self ::= W_SELF
data_type_simple ::= (data_type_ref | TP_BOOL | TP_STRING | TP_ANY|
    TP_INT4 | TP_UINT4 | TP_INT8 | TP_UINT8 | TP_INT | TP_UINT | TP_FLOAT | TP_FLOAT8 | TP_FLOAT4 | TP_BYTE | TP_UBYTE | TP_VOID) data_type_generics? data_type_post_arr? {extends = data_type}
private data_type_post_arr ::= OPEN_SQUARE_BRACKET INT? CLOSE_SQUARE_BRACKET
data_type_ref ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier getReference]}
data_type_lambda ::= (data_type_option | data_type_collection | data_type_tuple | data_type_simple | data_type_self) ARROW data_type {extends = data_type}
data_type_collection ::= OPEN_SQUARE_BRACKET data_type CLOSE_SQUARE_BRACKET {extends = data_type}
data_type_map ::= OPEN_SQUARE_BRACKET data_type COLON data_type CLOSE_SQUARE_BRACKET {extends = data_type}
data_type_tuple ::= OPEN_BRACKET data_type? (COMMA data_type)* CLOSE_BRACKET {extends = data_type}
data_type_option ::= (data_type_simple| data_type_collection | data_type_tuple | data_type_self) WHAT {extends = data_type}
data_type_generics ::= LESS data_type (COMMA data_type)* MORE

expr_ ::= (expr_val | expr_clue) {extends = expr_ methods = [getTp]}
term_ ::= expr_case | expr_throw | expr_not | expr_if | expr_lambda | expr_braces | expr_call | expr_arr | expr_brackets |
    expr_minus | W_NIL | W_TRUE | W_FALSE | expr_string_const | INT | FLOAT | expr_self | expr_while | expr_do | W_BREAK | expr_return
    {extends = expr_}
expr_case ::= W_CASE OPEN_BRACKET expr_ CLOSE_BRACKET ((OPEN_BRACE case_item+ CLOSE_BRACE) | case_item+)
case_item ::= case_cond ARROW expr_
case_cond ::= (case_cond_unapply | case_cond_val | expr_string_const | case_cond_const) {extends = case_cond}
case_cond_val ::= def_name case_cond_tp? {extends = case_cond}
case_cond_unapply ::= data_type_ref? (OPEN_BRACKET case_cond (COMMA case_cond)* CLOSE_BRACKET) case_cond_tp?{extends = case_cond}
case_cond_tp ::= COMMA data_type {extends = case_cond}
case_cond_const ::= (INT | FLOAT | W_NIL | W_TRUE | W_FALSE) {extends = case_cond}

expr_string_const ::= STRING+ {extends = expr_}
expr_while ::= W_WHILE OPEN_BRACKET expr_ CLOSE_BRACKET expr_ {extends = expr_}
expr_do ::= W_DO expr_ W_WHILE OPEN_BRACKET expr_ CLOSE_BRACKET {extends = expr_}
expr_return ::= W_RETURN expr_
expr_self ::= W_SELF {extends = expr_}
expr_throw ::= W_THROW expr_  {extends = expr_}
expr_not ::= EXCLAMATION expr_  {extends = expr_}
expr_minus ::= MINUS expr_  {extends = expr_}
expr_brackets ::= OPEN_BRACKET expr_ (COMMA expr_)* CLOSE_BRACKET  {extends = expr_}
expr_if ::= (W_IF OPEN_BRACKET expr_ CLOSE_BRACKET expr_ (W_ELSE expr_)?)  {extends = expr_}
private post_op ::= PLUS_PLUS | MINUS_MINUS

expr_clue ::= expr_bind ((CLUE | CLONE) expr_clue)? post_op? {extends = expr_}
expr_bind ::= expr_set (MORE MORE expr_bind)? {extends = expr_}
expr_set ::= expr_bool ((SET | PLUS_SET| MINUS_SET | MUL_SET | DIV_SET) expr_bool)?
expr_bool ::= expr_comp ((AND | OR) expr_bool)? {extends = expr_}
expr_comp ::= expr_pm ((EQ| MORE | LESS| MOREEQ| LESSEQ | NOT_EQ) expr_pm)? {extends = expr_}
expr_pm ::= expr_md ((PLUS | MINUS) expr_pm)? {extends = expr_}
expr_md ::= expr_dot ((MUL | DIV) expr_md)? {extends = expr_}
expr_dot ::= expr_index (DOT expr_index)* {extends = expr_}
expr_index ::=term_ index_op? {extends = expr_}
index_op ::= OPEN_SQUARE_BRACKET expr_ CLOSE_SQUARE_BRACKET index_op?

expr_call ::= call_name expr_call_generics? expr_call_params? expr_call_post_lambda? {extends = expr_}
expr_call_post_lambda ::= OPEN_BRACE (lambda_par (COMMA lambda_par)* ARROW)? expr_* CLOSE_BRACE
call_name ::= (IDENT | W_CLASS | W_TYPE) {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier getReference]}
private expr_call_generics ::= LESS data_type (COMMA data_type)* MORE
expr_call_params ::= OPEN_BRACKET expr_call_param? (COMMA expr_call_param)* CLOSE_BRACKET
expr_call_param ::= (def_name SET)? expr_
expr_braces ::= (OPEN_BRACE expr_* CLOSE_BRACE) {extends = expr_}
expr_arr ::= OPEN_SQUARE_BRACKET expr_? (COMMA expr_)* CLOSE_SQUARE_BRACKET  {extends = expr_}
expr_val ::= (W_VAL | W_VAR) def_name (COLON data_type)? (SET expr_)? {extends = expr_}
expr_lambda ::= (lambda_par | lambda_pars) ARROW expr_ {extends = expr_}
private lambda_pars ::= OPEN_BRACKET lambda_par (COMMA lambda_par)* CLOSE_BRACKET

lambda_par ::= def_name (COLON data_type)?
