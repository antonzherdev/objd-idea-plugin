{
  parserClass="com.antonzherdev.objd.parser.ObjDParser"
  stubParserClass="com.antonzherdev.objd.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ObjD"
  psiImplClassSuffix="Impl"
  psiPackage="com.antonzherdev.objd.psi"
  psiImplPackage="com.antonzherdev.objd.psi.impl"

  elementTypeHolderClass="com.antonzherdev.objd.psi.ObjDTypes"
  elementTypeClass="com.antonzherdev.objd.psi.ObjDElementType"
  tokenTypeClass="com.antonzherdev.objd.psi.ObjDTokenType"

  psiImplUtilClass="com.antonzherdev.objd.psi.impl.ObjDPsiImplUtil"
}

file ::= statement_*

private statement_ ::= ((W_STUB? (class_statement | def_statement | field_statement))|import_statement |COMMENT)

import_statement ::= (W_IMPORT (import_od_file | STRING | (LESS IDENT MORE)))
import_od_file ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
                                     methods=[getName setName getNameIdentifier getReference]}

class_statement ::= ((W_CLASS | W_TRAIT | W_STRUCT | W_ENUM) class_name class_generics? class_constructor_fields? class_extends? class_body?)
class_generics ::= LESS class_generic (COMMA class_generic)* MORE
class_generic ::= class_name
class_name ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
               methods=[getName setName getNameIdentifier]}

private class_constructor_fields ::= (OPEN_BRACKET class_constructor_field (COMMA class_constructor_field)* CLOSE_BRACKET)
class_constructor_field ::= (W_WEAK? (W_VAR | W_VAL)? def_name COLON data_type (SET expr_)?)
def_name ::= (IDENT | W_ELSE | W_DEF | W_SELF)
    {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier]}

class_extends ::= (W_EXTENDS data_type_ref data_type_generics?)

class_body ::= (OPEN_BRACE enum_item* (def_statement | field_statement)* CLOSE_BRACE)

private enum_item ::= IDENT expr_call_params?

field_statement ::= (mods (W_VAR | W_VAL)? def_name (COLON data_type)? (SET expr_)?)  {methods = [isStatic]}
mods ::= mod*
private mod ::= static_mod | weak_mod | private_mod
private static_mod ::= W_STATIC {extends = mod}
private weak_mod ::= W_WEAK {extends = mod}
private private_mod ::= W_PRIVATE {extends = mod}

def_statement ::= (mods W_DEF def_name class_generics? def_parameters? (COLON data_type)? SET? expr_?) {methods = [isStatic]}
private def_parameters ::= (OPEN_BRACKET def_parameter? (COMMA def_parameter)* CLOSE_BRACKET)
def_parameter ::= (def_name? COLON data_type (SET expr_)?)

data_type ::= (data_type_lambda | data_type_option | data_type_collection | data_type_map | data_type_tuple | data_type_simple)
data_type_simple ::= (data_type_ref | TP_BOOL | TP_STRING | TP_INT | TP_UINT | TP_FLOAT | TP_VOID) data_type_generics? {extends = data_type}
data_type_ref ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier getReference]}
data_type_lambda ::= (data_type_option | data_type_collection | data_type_tuple | data_type_simple) ARROW data_type {extends = data_type}
data_type_collection ::= OPEN_SQUARE_BRACKET data_type (COLON data_type)? CLOSE_SQUARE_BRACKET {extends = data_type}
data_type_map ::= OPEN_SQUARE_BRACKET data_type COLON data_type CLOSE_SQUARE_BRACKET {extends = data_type}
data_type_tuple ::= OPEN_BRACKET data_type? (COMMA data_type)* CLOSE_BRACKET {extends = data_type}
data_type_option ::= (data_type_simple| data_type_collection | data_type_tuple) WHAT {extends = data_type}
data_type_generics ::= LESS data_type (COMMA data_type)* MORE

expr_ ::= (expr_val | expr_set) {extends = expr_ methods = [getTp]}
term_ ::= expr_throw | expr_not | expr_if | expr_lambda | expr_braces | expr_call | expr_arr | expr_brackets | expr_minus | W_NIL | W_TRUE | W_FALSE | STRING | INT | FLOAT | expr_self
    {extends = expr_}
expr_self ::= W_SELF {extends = expr_}
expr_throw ::= W_THROW expr_  {extends = expr_}
expr_not ::= EXCLAMATION expr_  {extends = expr_}
expr_minus ::= MINUS expr_  {extends = expr_}
expr_brackets ::= OPEN_BRACKET expr_ (COMMA expr_)* CLOSE_BRACKET  {extends = expr_}
expr_if ::= (W_IF OPEN_BRACKET expr_ CLOSE_BRACKET expr_ (W_ELSE expr_)?)  {extends = expr_}
private post_op ::= PLUS_PLUS | MINUS_MINUS

expr_set ::= expr_bool ((SET | PLUS_SET| MINUS_SET | MUL_SET | DIV_SET) expr_bool)? post_op? {extends = expr_}
expr_bool ::= expr_comp ((AND | OR) expr_bool)? {extends = expr_}
expr_comp ::= expr_pm ((EQ| MORE | LESS| MOREEQ| LESSEQ | NOT_EQ) expr_pm)? {extends = expr_}
expr_pm ::= expr_md ((PLUS | MINUS) expr_pm)? {extends = expr_}
expr_md ::= expr_dot ((MUL | DIV) expr_md)? {extends = expr_}
expr_dot ::= expr_index (DOT expr_index)* {extends = expr_}
expr_index ::=term_ index_op? {extends = expr_}
private index_op ::= OPEN_SQUARE_BRACKET expr_ CLOSE_SQUARE_BRACKET expr_arr?

expr_call ::= call_name expr_call_generics? expr_call_params? {extends = expr_}
call_name ::= IDENT {mixin="com.antonzherdev.objd.psi.impl.ObjDNamedElementImpl" implements="com.antonzherdev.objd.psi.ObjDNamedElement"
    methods=[getName setName getNameIdentifier getReference]}
private expr_call_generics ::= LESS data_type (COMMA data_type)* MORE
private expr_call_params ::= OPEN_BRACKET expr_call_param? (COMMA expr_call_param)* CLOSE_BRACKET
private expr_call_param ::= (def_name SET)? expr_
expr_braces ::= (OPEN_BRACE expr_* CLOSE_BRACE) {extends = expr_}
expr_arr ::= OPEN_SQUARE_BRACKET expr_? (COMMA expr_)* CLOSE_SQUARE_BRACKET  {extends = expr_}
expr_val ::= (W_VAL | W_VAR) def_name (COLON data_type)? (SET expr_)? {extends = expr_}
expr_lambda ::= (lambda_par | lambda_pars) ARROW expr_ {extends = expr_}
private lambda_pars ::= OPEN_BRACKET lambda_par (COMMA lambda_par)* CLOSE_BRACKET

lambda_par ::= def_name (COLON data_type)?
